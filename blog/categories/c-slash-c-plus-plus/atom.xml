<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C/c++ | Developer's Lab]]></title>
  <link href="http://di0.github.io/blog/categories/c-slash-c-plus-plus/atom.xml" rel="self"/>
  <link href="http://di0.github.io/"/>
  <updated>2019-01-16T00:04:10-02:00</updated>
  <id>http://di0.github.io/</id>
  <author>
    <name><![CDATA[Diogo Pinto]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Shallow and Deep Copy in C++ Language]]></title>
    <link href="http://di0.github.io/blog/2018/09/22/shallow-and-deep-copy-in-c-plus-plus/"/>
    <updated>2018-09-22T00:42:20-03:00</updated>
    <id>http://di0.github.io/blog/2018/09/22/shallow-and-deep-copy-in-c-plus-plus</id>
    <content type="html"><![CDATA[<p>When we create a new object in C++, the default constructor already do the process known as <strong>memberwise copy</strong> or
commonly <strong>shallow copy</strong>. It happens, because C++ compiler<!--more--> do not known enough about the current class that
is being evaluated in run time.</p>

<p>For instance, consider the hypothetical example below:</p>

<p><div class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="k">namespace</span> <span class="n">Network</span>
<span class="p">{</span>
        <span class="k">class</span> <span class="nc">IPConfig</span>
        <span class="p">{</span>
                <span class="k">private</span><span class="o">:</span>
                        <span class="k">const</span> <span class="kt">char</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">m_ip_address</span><span class="p">;</span>
                        <span class="k">const</span> <span class="kt">char</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">m_mask</span><span class="p">;</span>
                <span class="k">public</span><span class="o">:</span>
                        <span class="n">IPConfig</span><span class="p">(</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">ip_address</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">mask</span> <span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>                    <span class="kt">char</span> <span class="o">*</span> <span class="n">get_ip_address</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
                    <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">get_mask</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
    <span class="p">}</span>
<span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span></code></pre></div></p>

<p>And here is implementation of the one&rsquo;s own default constructor mentioned previously above:</p>

<p><div class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="n">Network</span><span class="o">::</span><span class="n">IPConfig</span><span class="o">::</span><span class="n">IPConfig</span><span class="p">(</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">ip_address</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">mask</span> <span class="p">)</span>
                <span class="o">:</span> <span class="n">m_ip_address</span><span class="p">(</span> <span class="n">ip_address</span> <span class="p">),</span> <span class="n">m_mask</span><span class="p">(</span> <span class="n">mask</span> <span class="p">)</span> <span class="p">{}</span></code></pre></div></p>

<p>How we can see above, we have an example code snippet that show a conventional code of a class that represent an
Internet Protocol(IP), used in network communication layer. This class have a default constructor that configure
the members variables with values given in your parameters.</p>

<p>When we create a new object, like this:</p>

<p><div class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="n">Network</span><span class="o">::</span><span class="n">IPConfig</span> <span class="n">ipconfig</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mf">192.168.0.1</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mf">255.255.0.0</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="p">);</span></code></pre></div></p>

<p>and then we do like this:</p>

<p><div class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="n">read_ipconfig</span><span class="p">(</span> <span class="n">ipconfig</span> <span class="p">);</span></code></pre></div></p>

<p>The compiler behind the curtains, will do something like it when we handle it on <strong>read_ipconfig</strong> function:</p>

<p><div class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="n">Network</span><span class="o">::</span><span class="n">IPConfig</span><span class="o">::</span><span class="n">IPConfig</span><span class="p">(</span> <span class="k">const</span> <span class="n">Network</span><span class="o">::</span><span class="n">IPConfig</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">ipconfig</span> <span class="p">)</span>
<span class="p">{</span>
     <span class="n">m_address</span> <span class="o">=</span> <span class="n">ipconfig</span><span class="p">.</span><span class="n">m_ip_address</span><span class="p">;</span>
     <span class="n">m_mask</span> <span class="o">=</span> <span class="n">ipconfig</span><span class="p">.</span><span class="n">m_mask</span><span class="p">;</span>
<span class="p">}</span></code></pre></div></p>

<p>Look that the compiler created a new object, based from state another object of same type. Notice also that, the constructor
default is not initialized again, therefore, object already has a initialized state. As we have not our own copy
constructor, then the compiler use own way to performs member-wise copy, according shown above. Okay, so far we have not
problem here, it is a default feature of own C++ compiler.</p>

<p>However, the problem begins emerge when we work with allocation of memory blocks and we have a destructor in our class that
deallocates eventual blocks of memory previously allocated, when our object is no more referenced on present scope.</p>

<p>Let&rsquo;s go change the constructor previously shown above and implements it with allocate blocks, after we will deallocate the memory
of block allocated:</p>

<p><div class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="n">Network</span><span class="o">::</span><span class="n">IPConfig</span><span class="o">::</span><span class="n">IPConfig</span><span class="p">(</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">ip_address</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">mask</span> <span class="p">)</span>
                <span class="o">:</span> <span class="n">m_ip_address</span><span class="p">(</span> <span class="n">ip_address</span> <span class="p">),</span> <span class="n">m_mask</span><span class="p">(</span> <span class="n">mask</span> <span class="p">)</span>
<span class="p">{</span>
        <span class="n">assert</span><span class="p">(</span> <span class="n">m_ip_address</span> <span class="p">);</span>
        <span class="n">assert</span><span class="p">(</span> <span class="n">m_mask</span> <span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="kt">int</span> <span class="n">s_size</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">strlen</span><span class="p">(</span> <span class="n">m_ip_address</span> <span class="p">);</span>
    <span class="n">m_buffer_ip_address</span> <span class="o">=</span> <span class="p">(</span> <span class="kt">char</span> <span class="o">*</span> <span class="p">)</span> <span class="n">malloc</span><span class="p">(</span> <span class="n">s_size</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">);</span>
    <span class="k">for</span> <span class="p">(</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">s_size</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span> <span class="p">)</span>
            <span class="n">m_buffer_ip_address</span><span class="p">[</span> <span class="n">i</span> <span class="p">]</span> <span class="o">=</span> <span class="n">m_ip_address</span><span class="p">[</span> <span class="n">i</span> <span class="p">];</span>
<span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="n">Network</span><span class="o">::</span><span class="n">IPConfig</span><span class="o">::~</span><span class="n">IPConfig</span><span class="p">()</span>
<span class="p">{</span>
        <span class="n">free</span><span class="p">(</span> <span class="n">m_buffer_ip_address</span> <span class="p">);</span>
<span class="p">}</span></code></pre></div></p>

<p>Now, let us suppose that we have a non-member function that validate if the ip address given by parameter it&rsquo;s an
Internet Protocol version 4 valid format:</p>

<p><div class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="kt">bool</span>
<span class="nf">is_valid_ipv4</span><span class="p">(</span> <span class="k">const</span> <span class="n">Network</span><span class="o">::</span><span class="n">IPConfig</span> <span class="n">ipconfig</span> <span class="p">)</span>
<span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">stringstream</span> <span class="n">ip</span><span class="p">(</span> <span class="n">ipconfig</span><span class="p">.</span><span class="n">get_ip_address</span><span class="p">()</span> <span class="p">);</span>
        <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">split_ip</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">field</span><span class="p">;</span>
    <span class="k">while</span><span class="p">(</span> <span class="n">std</span><span class="o">::</span><span class="n">getline</span><span class="p">(</span> <span class="n">ip</span><span class="p">,</span> <span class="n">field</span><span class="p">,</span> <span class="sc">&#39;.&#39;</span> <span class="p">)</span> <span class="p">)</span>
            <span class="n">split_ip</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span> <span class="n">field</span> <span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span> <span class="n">split_ip</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">==</span> <span class="mi">4</span> <span class="p">)</span>
            <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
    <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
<span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span></code></pre></div></p>

<p>Without going into detail, for those that no known, the internet Protocol version 4 (IPv4), it&rsquo;s have the ip address format with
quad-dotted representations( 32 bits ). Roughly, it&rsquo;s separated by four dots. <strong><em>eg: 200.201.3.33</em></strong></p>

<p>After we validate and ensure that given ip address is an version 4 accept, we will create an another non-member function
that simply reads and show the ip address, together with your mask set up:</p>

<p><div class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="kt">void</span>
<span class="nf">read_ipv4</span><span class="p">(</span> <span class="k">const</span> <span class="n">Network</span><span class="o">::</span><span class="n">IPConfig</span> <span class="n">ipc</span> <span class="p">)</span>
<span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">ipc</span><span class="p">.</span><span class="n">get_ip_address</span><span class="p">()</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">/&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">ipc</span><span class="p">.</span><span class="n">get_mask</span><span class="p">()</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
<span class="p">}</span></code></pre></div></p>

<p>Finally, let go create the main function that will go call the non-member function that will validate the ip address
and after, will read the value with mask concatenation:</p>

<p><div class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="kt">int</span>
<span class="nf">main</span><span class="p">(</span> <span class="kt">void</span> <span class="p">)</span>
<span class="p">{</span>
        <span class="n">Network</span><span class="o">::</span><span class="n">IPConfig</span> <span class="n">ipconfig</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mf">192.168.1.30</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mf">255.255.255.0</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span> <span class="n">is_valid_ipv4</span><span class="p">(</span> <span class="n">ipconfig</span> <span class="p">)</span> <span class="p">)</span>
                <span class="n">read_ipv4</span><span class="p">(</span> <span class="n">ipconfig</span> <span class="p">);</span>
        <span class="k">else</span>
                <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Invalid</span> <span class="n">ipv4</span> <span class="n">format</span><span class="p">.</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
<span class="p">}</span></code></pre></div></p>

<p>Therefore, the expect output of the read_ipv4 function is the IP Address and your mask, like this:</p>

<p><strong>192.168.1.30/255.255.255.0</strong></p>

<p>but it did not work as expected, we had an unexpected behavior and nothing was read. Do you know why this happened?</p>

<pre><code class="c++">#include &lt;cstring&gt;
#include &lt;cassert&gt;
#include &lt;iostream&gt;
#include &lt;sstream&gt;
#include &lt;vector&gt;

#include &lt;stdlib.h&gt;

// The header
namespace Network
{
        class IPConfig
        {
                private:
                        const char *m_ip_address;
                        char *m_buffer_ip_address;
                public:
                        IPConfig( const char * );
                        ~IPConfig();

                        char * get_ip_address() const;
        };
}

/**
 * Constructor default. This will allocate memory blocks to
 * IP Address target.
 */
Network::IPConfig::IPConfig( const char *ip_address )
                : m_ip_address( ip_address )
{
        assert( m_ip_address );
        int s_size = std::strlen( m_ip_address );
        m_buffer_ip_address = ( char * ) malloc( s_size + 1 );
        for ( int i = 0; i &lt; s_size; ++i )
                m_buffer_ip_address[ i ] = m_ip_address[ i ];
}

/**
 * Destructor. This will destroy allocation.
 */
Network::IPConfig::~IPConfig()
{
        free( m_buffer_ip_address );
}

/**
 * Gets the configured IP Address.
 */
char *
Network::IPConfig::get_ip_address() const
{
        return m_buffer_ip_address;
}


// The main part. Here we will go to test the Network IPConfig feature.

bool
is_valid_ipv4( const Network::IPConfig ipc )
{
        std::stringstream ip( ipc.get_ip_address() );
        std::vector&lt;std::string&gt; split_ip;

        std::string field;
        while( std::getline( ip, field, '.' ) )
                split_ip.push_back( field );

        if ( split_ip.size() == 4 )
                return true;
        return false;
}

void
read_ipv4( const Network::IPConfig ipc )
{
        std::cout &lt;&lt; ipc.get_ip_address() &lt;&lt; std::endl;
}

int
main( void )
{
        Network::IPConfig ipc( "192.168.1.30" );
        if ( is_valid_ipv4( ipc ) )
                read_ipv4( ipc );
        else
                std::cout &lt;&lt; "Invalid ipv4 format." &lt;&lt; std::endl;
}
</code></pre>

<p>In the main function, we create a Network::IPConfig type, configured with ip address 192.168.1.30 and, soon after,
we validate if it&rsquo;s a valid IP Address format version 4. The IP address version 4, is separeted by 4 dots, if this
match, the is_valid_ipv4 function will return true, otherwise false.</p>

<p>So, after, we will read the IP Address sets by constructor. Therefore, the expect output of the read_ipv4 function
is the IP Address 192.168.1.30, but, we have a unexpected behavior. Why did this happen?</p>

<p>It happens, because the compiler</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reading Parameters From Function - C]]></title>
    <link href="http://di0.github.io/blog/2018/09/21/reading-parameters-from-function-c/"/>
    <updated>2018-09-21T23:00:41-03:00</updated>
    <id>http://di0.github.io/blog/2018/09/21/reading-parameters-from-function-c</id>
    <content type="html"><![CDATA[<p>In this post, I was write as we can get the parameters given to a function in language C, using
stdarg library, that declares a type va_list and defines three macros for<!--more--> stepping
through  a list of arguments whose number and types are not known to the called function.</p>

<p>Below is show the declared functions in stdarg:</p>

<p><div class="highlight"><pre><code class="language-c" data-lang="c"><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdarg</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">va_start</span><span class="p">(</span> <span class="kt">va_list</span> <span class="n">ap</span><span class="p">,</span> <span class="n">last</span> <span class="p">);</span>
<span class="n">type</span> <span class="nf">va_arg</span><span class="p">(</span> <span class="kt">va_list</span> <span class="n">ap</span><span class="p">,</span> <span class="n">type</span> <span class="p">);</span>
<span class="kt">void</span> <span class="nf">va_end</span><span class="p">(</span> <span class="kt">va_list</span> <span class="n">ap</span> <span class="p">);</span>
<span class="kt">void</span> <span class="nf">va_copy</span><span class="p">(</span> <span class="kt">va_list</span> <span class="n">dest</span><span class="p">,</span> <span class="kt">va_list</span> <span class="n">src</span> <span class="p">);</span></code></pre></div></p>

<pre><code class="c">#include &lt;stdio.h&gt;
#include &lt;stdarg.h&gt;

void read_names( char *name_main, ... )
{
        va_list args;
        va_start( args, name_main );

        char *name1 = va_arg( args, char * );
        char *name2 = va_arg( args, char * );

        fprintf( stdout, "%s =&gt; %s and %s\n", name_main, name1, name2 );
        va_end( args );
}

int
main()
{
        read_names( "Main name", "second name", "third name" );
}
</code></pre>

<p>As shown above, we can see that use the function <strong>va_start</strong>, which is declared in stdarg.h header. This
function is responsible to get a varying number of arguments of varying types.</p>

<p>The <strong>var_start</strong> macro, initializes <strong>va_list</strong> for subsequent use by <strong>va_arg()</strong> and <strong>va_end()</strong>, and must be called
first.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Get Size of Array With C Language]]></title>
    <link href="http://di0.github.io/blog/2018/09/15/get-size-of-array-with-c-language/"/>
    <updated>2018-09-15T03:20:58-03:00</updated>
    <id>http://di0.github.io/blog/2018/09/15/get-size-of-array-with-c-language</id>
    <content type="html"><![CDATA[<p>Language C has not function available that recover size of array by default. However, we
can use a trick that do possible get such size. Look like on example below:<!--more--></p>

<pre><code class="c">#include &lt;stdio.h&gt;

int
main()
{
        int a[ 99 ];
        size_t n = sizeof( a ) / sizeof( int );
        printf( "%d\n", n );
}
</code></pre>

<p>All right, the output will be <strong>99</strong>. Thus, if you change the array to char type, for example, you can have
problems because the expression above use <strong>int</strong> type.</p>

<p>As see above, we know that, the C language use the unary operator function <strong>sizeof</strong>, that compute the size of
type(char, int, float, double&hellip;) in compile time. So, the <strong>int</strong> type has a different size of <strong>char</strong> type.
Also, the result of expression can be different relative from machine architecture. eg: 32 bits or 64 bits.</p>

<p>Then, to avoid this, we should use something like this way:</p>

<pre><code class="c">#include &lt;stdio.h&gt;

int
main()
{
        int a[ 99 ];
        size_t n = sizeof( a ) / sizeof( a[ 0 ] ); // Here, we get the type of array
        printf( "%d\n", n );
}
</code></pre>

<p>In example above, we get the first field of the array(<strong><em>sizeof(a[0])</em></strong>), instead to compute by type(<strong><em>sizeof(int)</em></strong>). It was
sufficient to compute array size, independent of data type her. Notice also that, this became more generic expression.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pointer to Function With C/C++]]></title>
    <link href="http://di0.github.io/blog/2018/09/15/c-c++-pointer-to-function/"/>
    <updated>2018-09-15T03:14:27-03:00</updated>
    <id>http://di0.github.io/blog/2018/09/15/c-c++-pointer-to-function</id>
    <content type="html"><![CDATA[<p>Like any entity stored in memory, a function also has your own address and other resources stored on dynamic memory
of operation system.<!--more-->
Therefore, is possible have a pointer variable that pointer to the address to function stored on memory. The syntax to
a pointer to function basically resembles this:</p>

<p><span style="color:teal;font-weight:bold">type_return (*variable_name)( type data of one and/or more parameters or no parameter )</span></p>

<p>For example:</p>

<p><div class="highlight"><pre><code class="language-c" data-lang="c"><span class="kt">int</span> <span class="p">(</span> <span class="o">*</span><span class="n">pointer_f</span> <span class="p">)(</span> <span class="kt">int</span> <span class="p">);</span></code></pre></div></p>

<p>In above example, we create a pointer that points to a function that has a type integer as parameter and return a type
integer. Notice that, we use parentheses in the function declaration to alter precedence, which is greater than the asterisk(*), otherwise, without
this, the compiler interprets the declaration as a <strong>function</strong> that will return an integer type and get an integer as parameter, look how:</p>

<p><div class="highlight"><pre><code class="language-c" data-lang="c"><span class="kt">int</span> <span class="o">*</span><span class="nf">pointer_f</span><span class="p">(</span> <span class="kt">int</span> <span class="p">);</span></code></pre></div></p>

<p>As previously described, we can use this pointer to a function that has an integer type parameter and also returns an integer type.
See like it works:</p>

<p><div class="highlight"><pre><code class="language-c" data-lang="c"><span class="kt">int</span> <span class="nf">calculate_ip_broadcast</span><span class="p">(</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">subnet</span> <span class="p">)</span>
<span class="p">{</span>
    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">bits</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span> <span class="n">remove_dots</span><span class="p">(</span> <span class="n">subnet</span> <span class="p">)</span> <span class="p">)</span> <span class="o">^</span> <span class="mh">0xffffffff</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">bits</span><span class="p">;</span>
<span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">pointer_f</span> <span class="o">=</span> <span class="n">calculate_ip_broadcast</span><span class="p">;</span></code></pre></div></p>

<p>Notice that <strong>pointer_f</strong> now, points to the address from <strong>calculate_ip_broadcast</strong> function. Once pointed to target function, we can
invoke the function through pointer, like any another function invocation:</p>

<p><div class="highlight"><pre><code class="language-c" data-lang="c"><span class="kt">int</span> <span class="n">r</span> <span class="o">=</span> <span class="n">pointer_f</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mf">172.16.16.0</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="p">);</span></code></pre></div></p>

<p>or, if we prefer, we may:</p>

<p><div class="highlight"><pre><code class="language-c" data-lang="c"><span class="kt">int</span> <span class="n">r</span> <span class="o">=</span> <span class="p">(</span> <span class="o">*</span><span class="n">pointer_f</span> <span class="p">)(</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mf">172.16.16.0</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="p">);</span></code></pre></div></p>

<p>With pointer function, we can work with <strong>call back</strong> techniques, allow us perform tasks complex of form flexible.</p>

<h3 style="color:navy;">More about function pointer</h3>


<p>Now that we known how works function pointer, let&rsquo;s go learn more about this.</p>

<p>In C language we can work with function inside another as parameter, hypothetically consider the following code sample:</p>

<p><div class="highlight"><pre><code class="language-c" data-lang="c"><span class="kt">int</span> <span class="o">*</span> <span class="nf">on_calculate</span><span class="p">(</span> <span class="kt">int</span> <span class="n">f_calculate</span><span class="p">(</span> <span class="kt">int</span> <span class="n">value</span> <span class="p">)</span> <span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// &amp;hellip; something</span>
    <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">f_calculate</span><span class="p">(</span> <span class="mh">0x00</span> <span class="p">);</span>
    <span class="kt">int</span> <span class="o">*</span><span class="n">p_result</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">result</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">p_result</span><span class="p">;</span>
<span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">calculate_form_one</span><span class="p">(</span> <span class="kt">int</span> <span class="n">value</span> <span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">exp</span> <span class="o">=</span> <span class="n">value</span> <span class="o">/</span> <span class="mh">0xff</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">exp</span><span class="p">;</span>
<span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">calculate_form_two</span><span class="p">(</span> <span class="kt">int</span> <span class="n">value</span> <span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">exp</span> <span class="o">=</span> <span class="p">(</span> <span class="n">value</span> <span class="o">/</span> <span class="mh">0xff</span> <span class="p">)</span> <span class="o">*</span> <span class="mh">0xff</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">exp</span><span class="p">;</span>
<span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span>
<span class="n">main</span><span class="p">(</span> <span class="kt">void</span> <span class="p">)</span>
<span class="p">{</span>
    <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span>
     <span class="o">*</span> <span class="n">Let</span> <span class="n">just</span> <span class="n">passing</span> <span class="n">function</span> <span class="n">reference</span> <span class="n">name</span><span class="p">,</span> <span class="n">whose</span> <span class="n">will</span> <span class="n">invoke</span> <span class="n">later</span><span class="p">.</span>
     <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// this way:</span>

<span class="kt">int</span> <span class="o">*</span><span class="n">result</span> <span class="o">=</span> <span class="n">on_calculate</span><span class="p">(</span> <span class="n">calculate_form_one</span> <span class="p">);</span>
<span class="n">fprint</span><span class="p">(</span> <span class="n">stdout</span><span class="p">,</span> <span class="s">&quot;Result: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">*</span><span class="n">result</span> <span class="p">);</span>

<span class="c1">// or</span>

<span class="n">result</span> <span class="o">=</span> <span class="n">on_calculate</span><span class="p">(</span> <span class="n">calculate_form_two</span> <span class="p">);</span>
<span class="n">fprint</span><span class="p">(</span> <span class="n">stdout</span><span class="p">,</span> <span class="s">&quot;Result: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">*</span><span class="n">result</span> <span class="p">);</span>
<span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span></code></pre></div></p>

<p>We should not worry on details, just focus how it is possible and how we work with function inside another function as parameter.</p>

<p>Therefore, the following code snippet below, shows us a pointer to a function that get an another function
pointer as parameter:</p>

<p><div class="highlight"><pre><code class="language-c" data-lang="c"><span class="kt">int</span> <span class="o">*</span> <span class="p">(</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">pointer_f</span> <span class="p">)(</span> <span class="kt">int</span> <span class="p">(</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">inside_pointer_f</span> <span class="p">)(</span> <span class="kt">int</span> <span class="p">)</span> <span class="p">);</span></code></pre></div></p>

<p>Okay, that is really very obscure&hellip; this should to be explained:</p>

<p><strong>pointer_f</strong> is the  pointer variable name that receive another function pointer called <strong>inside_pointer_f</strong> as parameter that
receives an int and return int. The <strong>pointer_f</strong> pointer then, finally return a pointer to integer type.</p>

<p>So, with the pointer <strong>pointer_f</strong> quoted previously, we are able to point to the function like it:</p>

<p><div class="highlight"><pre><code class="language-c" data-lang="c"><span class="kt">int</span> <span class="o">*</span> <span class="nf">on_calculate</span><span class="p">(</span> <span class="kt">int</span> <span class="n">calculate</span><span class="p">(</span> <span class="kt">int</span> <span class="n">value</span> <span class="p">)</span> <span class="p">);</span></code></pre></div></p>

<p>Look as this is possible:</p>

<p><div class="highlight"><pre><code class="language-c" data-lang="c"><span class="kt">int</span> <span class="o">*</span> <span class="p">(</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">pointer_f</span> <span class="p">)(</span> <span class="kt">int</span> <span class="p">(</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">inside_pointer_f</span> <span class="p">)(</span> <span class="kt">int</span> <span class="p">)</span> <span class="p">);</span>
<span class="n">pointer_f</span> <span class="o">=</span> <span class="n">on_calculate</span><span class="p">;</span></code></pre></div></p>

<p>Then, we invoke this way:</p>

<p><div class="highlight"><pre><code class="language-c" data-lang="c"><span class="n">printf</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">%</span><span class="n">d</span><span class="err">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">*</span><span class="n">pointer_f</span><span class="p">(</span> <span class="n">some_calculate_function</span> <span class="p">)</span> <span class="p">);</span></code></pre></div></p>

<p>Above, we pass the function responsible by calculate, through function pointer. Notice that this becomes so much
flexible, we need just give calculate responsible function, then, we call back as required:</p>

<p><div class="highlight"><pre><code class="language-c" data-lang="c"><span class="n">printf</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">%</span><span class="n">d</span><span class="err">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">pointer_f</span><span class="p">(</span> <span class="n">calculate_form_one</span> <span class="p">)</span> <span class="p">);</span>
<span class="n">printf</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">%</span><span class="n">d</span><span class="err">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">pointer_f</span><span class="p">(</span> <span class="n">calculate_form_two</span> <span class="p">)</span> <span class="p">);</span>
<span class="c1">// and so on&amp;hellip;</span></code></pre></div></p>

<p>The declaration <strong>int * ( <em>pointer_f )( int ( </em>inside_pointer_f )( int ) )</strong> can be often times a confuse syntax and declare this every
time, is really so hard. Because of this, we can use the <strong>typedef</strong> reserved keyword, to define a type to hidden this complexity.</p>

<p><div class="highlight"><pre><code class="language-c" data-lang="c"><span class="k">typedef</span> <span class="kt">int</span> <span class="o">*</span> <span class="p">(</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">pointer_f</span> <span class="p">)(</span> <span class="kt">int</span> <span class="p">(</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">inside_pointer_f</span> <span class="p">)(</span> <span class="kt">int</span> <span class="p">)</span> <span class="p">);</span></code></pre></div></p>

<p>Now we can use this form:</p>

<p><div class="highlight"><pre><code class="language-c" data-lang="c"><span class="n">pointer_f</span> <span class="o">*</span> <span class="n">pointer_function</span><span class="p">;</span>
<span class="n">pointer_function</span> <span class="o">=</span> <span class="n">on_calculate</span><span class="p">;</span>
<span class="n">printf</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">%</span><span class="n">d</span><span class="err">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">pointer_function</span><span class="p">(</span> <span class="n">calculate_form_one</span> <span class="p">)</span> <span class="p">);</span>
<span class="n">printf</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">%</span><span class="n">d</span><span class="err">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">pointer_function</span><span class="p">(</span> <span class="n">calculate_form_two</span> <span class="p">)</span> <span class="p">);</span></code></pre></div></p>

<p>Below, follows a complete example:</p>

<p><div class="highlight"><pre><code class="language-c" data-lang="c"><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/&lt;</span><span class="n">em</span><span class="o">&gt;</span>
 <span class="o">*</span> <span class="n">Function</span> <span class="n">pointer</span> <span class="n">that</span> <span class="n">returns</span> <span class="n">a</span> <span class="n">pointer</span> <span class="n">to</span> <span class="n">integer</span> <span class="n">type</span><span class="p">.</span> <span class="n">This</span> <span class="n">function</span> <span class="n">has</span>
 <span class="o">*</span> <span class="n">three</span> <span class="n">parameters</span><span class="p">.</span> <span class="n">One</span> <span class="n">of</span> <span class="n">them</span> <span class="n">is</span> <span class="n">a</span> <span class="n">pointer</span> <span class="n">to</span> <span class="n">function</span> <span class="n">that</span> <span class="n">get</span> <span class="n">two</span> <span class="n">integers</span>
 <span class="o">*</span> <span class="n">parameters</span> <span class="n">and</span> <span class="n">that</span> <span class="k">return</span> <span class="n">an</span> <span class="n">integer</span> <span class="n">type</span><span class="p">.</span> <span class="n">Anothers</span> <span class="n">two</span> <span class="n">parameters</span> <span class="n">are</span> <span class="n">an</span>
 <span class="o">*</span> <span class="n">integer</span> <span class="n">types</span><span class="p">.</span>
 <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
<span class="k">typedef</span> <span class="kt">int</span> <span class="o">*</span> <span class="p">(</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">pointer_f</span> <span class="p">)(</span> <span class="kt">int</span> <span class="p">(</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">inside_pointer_f</span> <span class="p">)(</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span> <span class="p">),</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span> <span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="o">*</span>
<span class="n">on_calculate</span><span class="p">(</span> <span class="kt">int</span> <span class="n">calculate</span><span class="p">(</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span> <span class="p">),</span> <span class="kt">int</span> <span class="n">valueX</span><span class="p">,</span> <span class="kt">int</span> <span class="n">valueY</span> <span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">calculate</span><span class="p">(</span> <span class="n">valueX</span><span class="p">,</span> <span class="n">valueY</span> <span class="p">);</span>
    <span class="kt">int</span> <span class="o">*</span><span class="n">p_result</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">result</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">p_result</span><span class="p">;</span>
<span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span>
<span class="n">multiplication</span><span class="p">(</span> <span class="kt">int</span> <span class="n">valueX</span><span class="p">,</span> <span class="kt">int</span> <span class="n">valueY</span> <span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">valueX</span> <span class="o">*</span> <span class="n">valueY</span><span class="p">;</span>
<span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span>
<span class="n">addition</span><span class="p">(</span> <span class="kt">int</span> <span class="n">valueX</span><span class="p">,</span> <span class="kt">int</span> <span class="n">valueY</span> <span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">valueX</span> <span class="o">+</span> <span class="n">valueY</span><span class="p">;</span>
<span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span>
<span class="n">subtraction</span><span class="p">(</span> <span class="kt">int</span> <span class="n">valueX</span><span class="p">,</span> <span class="kt">int</span> <span class="n">valueY</span> <span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">valueX</span> <span class="o">-</span> <span class="n">valueY</span><span class="p">;</span>
<span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span>
<span class="n">division</span><span class="p">(</span> <span class="kt">int</span> <span class="n">valueX</span><span class="p">,</span> <span class="kt">int</span> <span class="n">valueY</span> <span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">valueX</span> <span class="o">/</span> <span class="n">valueY</span><span class="p">;</span>
<span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span>
<span class="n">main</span><span class="p">(</span> <span class="kt">void</span> <span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// References the function.</span>
    <span class="n">pointer_f</span> <span class="n">pointer_function</span> <span class="o">=</span> <span class="n">on_calculate</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// Now we can to dereferences the function and gives it another</span>
<span class="c1">// function as parameter that we desired to calculate.</span>

<span class="n">printf</span><span class="p">(</span> <span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">*</span><span class="n">pointer_function</span><span class="p">(</span> <span class="n">multiplication</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">5</span> <span class="p">)</span> <span class="p">);</span>
<span class="n">printf</span><span class="p">(</span> <span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">*</span><span class="n">pointer_function</span><span class="p">(</span> <span class="n">addition</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">7</span> <span class="p">)</span> <span class="p">);</span>
<span class="n">printf</span><span class="p">(</span> <span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">*</span><span class="n">pointer_function</span><span class="p">(</span> <span class="n">subtraction</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">2</span> <span class="p">)</span> <span class="p">);</span>
<span class="n">printf</span><span class="p">(</span> <span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">*</span><span class="n">pointer_function</span><span class="p">(</span> <span class="n">division</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">3</span> <span class="p">)</span> <span class="p">);</span>
<span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span></code></pre></div></p>

<p>And, the expected output respectively are:</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">25
17
3
5</code></pre></div></p>

<h3 style="color:navy;">Returning pointer to function</h3>


<p>It is possible also, returns pointer to function, according syntax above:</p>

<p><div class="highlight"><pre><code class="language-c" data-lang="c"><span class="kt">int</span><span class="p">(</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">return_point_to_function</span><span class="p">()</span> <span class="p">)()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="p">(</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">pnt_fn_ret_integer_type</span> <span class="p">)()</span> <span class="o">=</span> <span class="n">some_function_that_return_int</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">pnt_fn_ret_integer_type</span><span class="p">;</span>
<span class="p">}</span></code></pre></div></p>

<p>Is important emphasizes that, rather than we use &ldquo;int <strong>( *return_point_to_function )()</strong>&rdquo;, we use the
<strong>parentheses</strong> after name <strong>return_point_to_function</strong>, because else, the compiler could to intepret
it as a declaration of pointer to a function and not a function that returns a pointer to function.</p>

<p>Let&rsquo;s go see a practice example. Let us suppose that we have this functions:</p>

<p><div class="highlight"><pre><code class="language-c" data-lang="c"><span class="kt">int</span>
<span class="nf">get_number_of_users_actives</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">n_users_actives</span><span class="p">;</span>
<span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span>
<span class="n">get_number_of_users_inactives</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">n_users_inactives</span><span class="p">;</span>
<span class="p">}</span></code></pre></div></p>

<p>With our function that returns a pointer to function previously quoted, we could do something like it:</p>

<p><div class="highlight"><pre><code class="language-c" data-lang="c"><span class="kt">int</span>
<span class="p">(</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">get_number_of_users</span><span class="p">()</span> <span class="p">)()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="p">(</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">pointer_function</span> <span class="p">)()</span> <span class="o">=</span> <span class="n">get_number_of_users_actives</span><span class="p">;</span>
    <span class="c1">// or</span>
    <span class="kt">int</span> <span class="p">(</span> <span class="o">*</span><span class="n">pointer_function</span> <span class="p">)()</span> <span class="o">=</span> <span class="n">get_number_of_users_inactives</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="n">pointer_function</span><span class="p">;</span>
<span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span></code></pre></div></p>

<p>As we can see, the function above returns a pointer to one of two function desired.</p>

<p>To show this working, follows an example more detail what we can do:</p>

<p><div class="highlight"><pre><code class="language-c" data-lang="c"><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">ACTIVE</span> <span class="mi">1</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">INACTIVE</span> <span class="mi">0</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span>
<span class="n">get_number_of_users_actives</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">n_users_actives</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">n_users_actives</span><span class="p">;</span>
<span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span>
<span class="n">get_number_of_users_inactives</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">n_users_inactives</span> <span class="o">=</span> <span class="mi">50</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">n_users_inactives</span><span class="p">;</span>
<span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span>
<span class="p">(</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">get_number_of_users</span><span class="p">(</span> <span class="kt">int</span> <span class="n">is_active</span> <span class="p">)</span> <span class="p">)()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="p">(</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">pointer_function</span><span class="p">)();</span>
    <span class="k">if</span> <span class="p">(</span> <span class="n">is_active</span> <span class="p">)</span>
        <span class="n">pointer_function</span> <span class="o">=</span> <span class="n">get_number_of_users_actives</span><span class="p">;</span>
    <span class="k">else</span>
        <span class="n">pointer_function</span> <span class="o">=</span> <span class="n">get_number_of_users_inactives</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="n">pointer_function</span><span class="p">;</span>
<span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span>
<span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="p">(</span> <span class="o">*</span><span class="n">result</span> <span class="p">)()</span> <span class="o">=</span> <span class="n">get_number_of_users</span><span class="p">(</span> <span class="n">ACTIVE</span> <span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Users</span> <span class="nl">actives</span><span class="p">:</span> <span class="o">%</span><span class="n">d</span><span class="err">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="n">result</span><span class="p">()</span> <span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">result</span> <span class="o">=</span> <span class="n">get_number_of_users</span><span class="p">(</span> <span class="n">INACTIVE</span> <span class="p">);</span>
<span class="n">printf</span><span class="p">(</span> <span class="s">&quot;Users inactives: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">result</span><span class="p">()</span> <span class="p">);</span>
<span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span></code></pre></div></p>

<p>The output is:</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">Users actives: 10
Users inactives: 50</code></pre></div></p>

<p>Again, is advisable to use the <strong>typedef keyword</strong> to facilitate the use this complex syntax and becomes it
more readability. For instance, see how would be with typedef:</p>

<p><div class="highlight"><pre><code class="language-c" data-lang="c"><span class="k">typedef</span> <span class="nf">int</span> <span class="p">(</span> <span class="o">*</span><span class="n">get_number_of_user</span> <span class="p">)();</span>
<span class="k">typedef</span> <span class="n">get_number_of_user</span> <span class="n">POINT_TO_GET_NUMBER_USER</span><span class="p">;</span></code></pre></div></p>

<p>So, we can change our function <strong>get_number_of_users</strong> to this:</p>

<p><div class="highlight"><pre><code class="language-c" data-lang="c"><span class="n">POINT_TO_GET_NUMBER_USER</span> <span class="nf">get_number_of_users</span><span class="p">(</span> <span class="kt">int</span> <span class="n">is_active</span> <span class="p">)</span>
<span class="p">{</span>
    <span class="n">POINT_TO_GET_NUMBER_USER</span> <span class="n">p_get_number</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span> <span class="n">is_active</span> <span class="p">)</span>
        <span class="n">p_get_number</span> <span class="o">=</span> <span class="n">get_number_of_users_actives</span><span class="p">;</span>
    <span class="k">else</span>
        <span class="n">p_get_number</span> <span class="o">=</span> <span class="n">get_number_of_users_inactives</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="n">p_get_number</span><span class="p">;</span>
<span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span></code></pre></div></p>

<p>and finally, in main function, would be:</p>

<p><div class="highlight"><pre><code class="language-c" data-lang="c"><span class="kt">int</span>
<span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">POINT_TO_GET_NUMBER_USER</span> <span class="n">result</span> <span class="o">=</span> <span class="n">get_user</span><span class="p">(</span> <span class="n">ACTIVE</span> <span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Users</span> <span class="nl">actives</span><span class="p">:</span> <span class="o">%</span><span class="n">d</span><span class="err">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="n">result</span><span class="p">()</span> <span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">result</span> <span class="o">=</span> <span class="n">get_user</span><span class="p">(</span> <span class="n">INACTIVE</span> <span class="p">);</span>
<span class="n">printf</span><span class="p">(</span> <span class="s">&quot;Users inactives: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">result</span><span class="p">()</span> <span class="p">);</span>
<span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span></code></pre></div></p>

<p style="border:3px; border-style:solid; border-color:#FF0000; padding: 1em;"><strong>Important!</strong><br><br>

When we use typedef keyword to define a function pointer, we shouldn't use the parentheses as we had done previously
in function pointer definition. Look:
<br>
<br>
<strong>int * ( *point_f )();</strong><br>
Above, was declared a function pointer that return a type integer pointer.
<br>
<br>
<strong>int * ( *point_f() )() { ... }</strong><br>
Above, was implemented a function called point_f that return a function pointer that return a type integer pointer.
<br>
<br>
<strong>typedef int * ( *point_f )();</strong><br>
Above, was declared with typedef keyword a function pointer that return a type integer pointer.
<br>
<br>
Notice that, with typedef keyword, we do not use the parentheses after name, it because we do it when we create a function
with using the typedef definition:<br><br>

<strong>point_f</strong> do_something()<br>
{<br>
....<br>
}<br><br>

If we use parentheses in typedef keyword, we will get errors in compilation time.
</p>


<p>Now look this curious case:</p>

<p><div class="highlight"><pre><code class="language-c" data-lang="c"><span class="kt">int</span>
<span class="nf">addition</span><span class="p">(</span> <span class="kt">int</span> <span class="n">valueX</span><span class="p">,</span> <span class="kt">int</span> <span class="n">valueY</span> <span class="p">)</span>
<span class="p">{</span>
        <span class="k">return</span> <span class="n">valueX</span> <span class="o">+</span> <span class="n">valueY</span><span class="p">;</span>
<span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span>
<span class="p">(</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">calculator</span><span class="p">()</span> <span class="p">)()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="p">(</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">p_function</span><span class="p">)(</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span> <span class="p">)</span> <span class="o">=</span> <span class="n">addition</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">p_function</span><span class="p">;</span>
<span class="p">}</span></code></pre></div></p>

<p>Notice that, the <strong>calculator function</strong>, returns a function pointer that receives two integers types and returns a
type integer. However, the <strong>signature</strong> from function tell us this:</p>

<p><div class="highlight"><pre><code class="language-c" data-lang="c"><span class="kt">int</span> <span class="p">(</span> <span class="o">*</span><span class="n">calculator</span><span class="p">()</span> <span class="p">)();</span></code></pre></div></p>

<p>This occurred because the compiler C, infers the parameters type from pointer function and <strong>allow</strong> us omits it, otherwise, we
should do it this way:</p>

<p><div class="highlight"><pre><code class="language-c" data-lang="c"><span class="kt">int</span> <span class="p">(</span> <span class="o">*</span><span class="n">calculator</span><span class="p">()</span> <span class="p">)(</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span> <span class="p">);</span></code></pre></div></p>

<p>If by change we specific the parameters types in <strong>calculator</strong> function, we are obliged to put the two parameters and not just one:</p>

<p><div class="highlight"><pre><code class="language-c" data-lang="c"><span class="kt">int</span> <span class="p">(</span> <span class="o">*</span><span class="n">calculator</span><span class="p">()</span> <span class="p">)(</span> <span class="kt">int</span> <span class="p">);</span> <span class="c1">// Error compile</span></code></pre></div></p>

<p>The same occurs in declaration:</p>

<p><div class="highlight"><pre><code class="language-c" data-lang="c"><span class="kt">int</span>
<span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="c1">// We can use this way</span>
    <span class="kt">int</span> <span class="p">(</span> <span class="o">*</span><span class="n">result</span> <span class="p">)()</span> <span class="o">=</span> <span class="n">calculator</span><span class="p">();</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// Or this way</span>
<span class="kt">int</span> <span class="p">(</span> <span class="o">*</span><span class="n">result</span> <span class="p">)(</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span> <span class="p">)</span> <span class="o">=</span> <span class="n">calculator</span><span class="p">();</span>

<span class="c1">// But we cannot this way</span>
<span class="kt">int</span> <span class="p">(</span> <span class="o">*</span><span class="n">result</span> <span class="p">)(</span> <span class="kt">int</span> <span class="p">)</span> <span class="o">=</span> <span class="n">calculator</span><span class="p">();</span>
<span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span></code></pre></div></p>

<p>Finally, the last example of how we can use function pointer. Here we show a function pointer that
returns a pointer to array of function of the type integer.</p>

<p><div class="highlight"><pre><code class="language-c" data-lang="c"><span class="kt">int</span> <span class="p">(</span> <span class="o">**</span><span class="n">pointer_function_to_array_of_functions_int</span><span class="p">()</span> <span class="p">)();</span></code></pre></div></p>

<p>As show above, we have a function that returns a function pointer to pointer, that points to an array
of function that returns an integer type. With this function, we can returns something like this:</p>

<p><div class="highlight"><pre><code class="language-c" data-lang="c"><span class="kt">int</span> <span class="p">(</span> <span class="o">*</span><span class="n">function_pointer_int</span><span class="p">[]</span> <span class="p">)()</span> <span class="o">=</span> <span class="p">{</span> <span class="n">function_int_one</span><span class="p">,</span> <span class="n">function_int_two</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span> <span class="p">};</span></code></pre></div></p>

<p>All right, this is more easier with an example. Let rewrites our code used previously that calculate two
numbers with four operations mathematic:</p>

<p><div class="highlight"><pre><code class="language-c" data-lang="c"><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdlib</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">typedef</span> <span class="kt">int</span> <span class="o">*</span> <span class="p">(</span> <span class="o">*</span><span class="n">FUNCT_PNT</span> <span class="p">)(</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span> <span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span>
<span class="n">multiplication</span><span class="p">(</span> <span class="kt">int</span> <span class="n">valueX</span><span class="p">,</span> <span class="kt">int</span> <span class="n">valueY</span> <span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">valueX</span> <span class="o">*</span> <span class="n">valueY</span><span class="p">;</span>
<span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span>
<span class="n">addition</span><span class="p">(</span> <span class="kt">int</span> <span class="n">valueX</span><span class="p">,</span> <span class="kt">int</span> <span class="n">valueY</span> <span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">valueX</span> <span class="o">+</span> <span class="n">valueY</span><span class="p">;</span>
<span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span>
<span class="n">subtraction</span><span class="p">(</span> <span class="kt">int</span> <span class="n">valueX</span><span class="p">,</span> <span class="kt">int</span> <span class="n">valueY</span> <span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">valueX</span> <span class="o">-</span> <span class="n">valueY</span><span class="p">;</span>
<span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span>
<span class="n">division</span><span class="p">(</span> <span class="kt">int</span> <span class="n">valueX</span><span class="p">,</span> <span class="kt">int</span> <span class="n">valueY</span> <span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">valueX</span> <span class="o">/</span> <span class="n">valueY</span><span class="p">;</span>
<span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="p">(</span> <span class="o">*</span><span class="n">p_list_fn_operations</span><span class="p">[]</span> <span class="p">)()</span> <span class="o">=</span> <span class="p">{</span> <span class="n">multiplication</span><span class="p">,</span> <span class="n">addition</span><span class="p">,</span> <span class="n">subtraction</span><span class="p">,</span> <span class="n">division</span> <span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span>
<span class="p">(</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">calculator</span><span class="p">()</span> <span class="p">)(</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span> <span class="p">)</span>
<span class="p">{</span>
    <span class="o">/&lt;/</span><span class="n">strong</span><span class="o">&gt;</span>
     <span class="o">*</span> <span class="n">There</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">s</span> <span class="n">no</span> <span class="n">need</span> <span class="n">to</span> <span class="n">use</span> <span class="n">an</span> <span class="n">address</span><span class="o">-</span><span class="n">of</span> <span class="n">operator</span> <span class="n">on</span> <span class="n">array</span><span class="p">,</span> <span class="n">like</span> <span class="nl">this</span><span class="p">:</span>
     <span class="o">*</span> <span class="kt">int</span> <span class="p">(</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">p_fn_operations</span> <span class="p">)(</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span> <span class="p">)</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">p_list_fn_operations</span><span class="p">[</span> <span class="mi">0</span> <span class="p">];</span>
     <span class="o">*</span> <span class="n">since</span> <span class="n">arrays</span> <span class="n">decay</span> <span class="n">into</span> <span class="n">implicit</span> <span class="n">pointers</span> <span class="n">on</span> <span class="n">the</span> <span class="n">right</span><span class="o">-</span><span class="n">hand</span> <span class="n">side</span> <span class="n">of</span>
     <span class="o">*</span> <span class="n">the</span> <span class="n">assignment</span> <span class="n">operator</span><span class="p">.</span>
     <span class="err">*/</span>
    <span class="kt">int</span> <span class="p">(</span> <span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">p_fn_operations</span> <span class="p">)(</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span> <span class="p">)</span> <span class="o">=</span> <span class="n">p_list_fn_operations</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">p_fn_operations</span><span class="p">;</span>
<span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span>
<span class="n">main</span><span class="p">()</span>
<span class="p">{</span> <span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
    <span class="c1">// Arrays are implicitly convertible to pointers, so it would be</span>
    <span class="c1">// the syntax below with double pointer:</span>
    <span class="kt">int</span> <span class="p">(</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span> <span class="p">(</span> <span class="o">*</span><span class="n">pointer_function_to_calculator</span> <span class="p">)()</span> <span class="p">)();</span>
    <span class="n">pointer_function_to_calculator</span> <span class="o">=</span> <span class="n">calculator</span><span class="p">;</span>
    <span class="kt">int</span> <span class="p">(</span> <span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">list_of_operation</span> <span class="p">)();</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">list_of_operation</span> <span class="o">=</span> <span class="p">(</span> <span class="o">*</span><span class="n">pointer_function_to_calculator</span> <span class="p">)();</span>

<span class="c1">// For each operations, we use an increment arithmetic to go through</span>
<span class="c1">// of array of pointer, searching by each of that operations.</span>
<span class="n">printf</span><span class="p">(</span> <span class="s">&quot;Multiplication = %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">(</span> <span class="o">*</span> <span class="n">list_of_operation</span> <span class="p">)(</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">6</span> <span class="p">)</span> <span class="p">);</span>
<span class="n">list_of_operation</span><span class="o">++</span><span class="p">;</span>

<span class="n">printf</span><span class="p">(</span> <span class="s">&quot;Addition = %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">(</span> <span class="o">*</span> <span class="n">list_of_operation</span> <span class="p">)(</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">7</span> <span class="p">)</span> <span class="p">);</span>
<span class="n">list_of_operation</span><span class="o">++</span><span class="p">;</span>

<span class="n">printf</span><span class="p">(</span> <span class="s">&quot;Subtraction = %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">(</span> <span class="o">*</span> <span class="n">list_of_operation</span> <span class="p">)(</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">4</span> <span class="p">)</span> <span class="p">);</span>
<span class="n">list_of_operation</span><span class="o">++</span><span class="p">;</span>

<span class="n">printf</span><span class="p">(</span> <span class="s">&quot;Division = %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">(</span> <span class="o">*</span> <span class="n">list_of_operation</span> <span class="p">)(</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">9</span> <span class="p">)</span> <span class="p">);</span>
<span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span></code></pre></div></p>

<p>The output will be:</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">Multiplication</span> <span class="o">=</span> 36
<span class="nv">Addition</span> <span class="o">=</span> 17
<span class="nv">Subtraction</span> <span class="o">=</span> 6
<span class="nv">Division</span> <span class="o">=</span> 9</code></pre></div></p>

<h3 style="color:navy;">Extra about function pointers</h3>


<p>In C language, the library signal.h have a function called <strong>signal</strong>, that provides a simple interface for
establishing an action for a particular signal.</p>

<p>The said function is the <strong>sighandler_t</strong> function, whose is a function pointer that points to a function
that returns void. That function will go handlers the integer type argument givens, configuring your
respective signal number. So, functions like this, are handles this way:</p>

<p><div class="highlight"><pre><code class="language-c" data-lang="c"><span class="kt">void</span> <span class="nf">handler</span> <span class="p">(</span><span class="kt">int</span> <span class="n">signum</span><span class="p">)</span> <span class="p">{</span> <span class="err">…</span> <span class="p">}</span></code></pre></div></p>

<p>And here, the signal function itself:</p>

<p><strong>sighandler_t signal( int signum, sighandler_t action )</strong></p>

<p>The signal function establishes action as the action for the signal signum.</p>

<p>The first argument, <strong>signum</strong>, identifies the signal whose behavior we want to control, and should be a signal number
The second argument, <strong>action</strong>, specifies the action( function ) that will be handlers the signal.</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">&lt;/p&gt;

&lt;h1&gt;include <span class="p">&amp;</span>lt<span class="p">;</span>signal.h&gt;&lt;/h1&gt;

&lt;p&gt;typedef void <span class="o">(</span>*sighandler_t<span class="o">)(</span>int<span class="o">)</span><span class="p">;</span>
sighandler_t signal<span class="o">(</span>int signum, sighandler_t handler<span class="o">)</span><span class="p">;</span></code></pre></div></p>

<p>For more details, type man signal.</p>

<p>Another famous utility in C language is the <strong>qsort</strong> function, from <strong>stdlib.h</strong> library, that have the following declaration:</p>

<p><div class="highlight"><pre><code class="language-c" data-lang="c"><span class="kt">void</span> <span class="nf">qsort</span><span class="p">(</span> <span class="kt">void</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">base</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">nmemb</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">size</span><span class="p">,</span>
            <span class="kt">int</span><span class="p">(</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">compar</span> <span class="p">)(</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="p">,</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span> <span class="p">));</span></code></pre></div></p>

<p>The Linux manual page, describe the following:</p>

<p><em>The qsort() function sorts an array with nmemb elements of size size. The base argument points to the start of the array.</em></p>

<p><em>The contents of the array are sorted in ascending order according to a comparison function pointed to by compar, which is</em>
<em>called with two arguments that point to the objects being compared.</em></p>

<p><em>The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered</em>
<em>to be respectively less than, equal to, or greater than the second. If two members compare as equal, their order in the</em>
<em>sorted array is undefined.</em></p>

<p>So, here we going see an example of how this works:</p>

<p><div class="highlight"><pre><code class="language-c" data-lang="c"><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdlib</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">desc_sort</span><span class="p">(</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">v1</span><span class="p">,</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">v2</span> <span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">first</span> <span class="o">=</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">(</span> <span class="kt">int</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span> <span class="n">v1</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">second</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span> <span class="kt">int</span> <span class="o">*</span> <span class="p">)</span> <span class="n">v2</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span> <span class="n">first</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">second</span> <span class="p">)</span>
    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
<span class="k">else</span> <span class="k">if</span> <span class="p">(</span> <span class="n">first</span> <span class="o">==</span> <span class="n">second</span> <span class="p">)</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="k">else</span>
    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
<span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">array</span><span class="p">[</span> <span class="mi">10</span> <span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
<span class="k">for</span> <span class="p">(</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">10</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span> <span class="p">)</span>
    <span class="n">array</span><span class="p">[</span> <span class="n">i</span> <span class="p">]</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>

<span class="n">qsort</span><span class="p">(</span> <span class="n">array</span><span class="p">,</span> <span class="mi">10</span> <span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span> <span class="kt">int</span> <span class="p">),</span> <span class="n">desc_sort</span> <span class="p">);</span>

<span class="k">for</span> <span class="p">(</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">10</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span> <span class="p">)</span>
    <span class="n">printf</span> <span class="p">(</span> <span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">array</span><span class="p">[</span> <span class="n">i</span> <span class="p">]</span> <span class="p">);</span>
<span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span></code></pre></div></p>

<p>the output will be:</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">9
8
7
6
5
4
3
2
1</code></pre></div></p>

<p>For more details, type man qsort.</p>
]]></content>
  </entry>
  
</feed>
