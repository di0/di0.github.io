<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | Developer's Lab]]></title>
  <link href="http://di0.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://di0.github.io/"/>
  <updated>2020-02-16T02:26:16-03:00</updated>
  <id>http://di0.github.io/</id>
  <author>
    <name><![CDATA[Diogo Pinto]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Determining Symbolic Links Java With Update-alternatives Command]]></title>
    <link href="http://di0.github.io/blog/2018/01/17/determining-symbolic-links-java-with-update-alternatives-command/"/>
    <updated>2018-01-17T16:01:01-02:00</updated>
    <id>http://di0.github.io/blog/2018/01/17/determining-symbolic-links-java-with-update-alternatives-command</id>
    <content type="html"><![CDATA[<p>With the utility <strong>update-alternatives</strong>, is possible you set versions of the Java installed in your Operating System Linux(which supports it),
without need add or <!--more--> remove symbolic link manually. To list one or more Java version available in target system, you can just typing the
command <strong>update-alternatives</strong>, adding the argument <strong>--list</strong>, together with name of the symlink(Symbolic Link) desired. For example:</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">update-alternatives <span class="p">&amp;</span>ndash<span class="p">;</span>list java</code></pre></div></p>

<p><img class="rigth" src="/images/output_update_alternative_list.jpeg" width="1800" height="1800" title="&lsquo;output perl group&rsquo;" ></p>

<p>Where <strong>java</strong> is the name of the symbolic link.</p>

<p>Also it is possible, you to install a new version, if by chance it hasn&rsquo;t on the list of the <strong>update-alternatives</strong>. You can thus use the parameter
<strong>--install</strong>, setting the following arguments:</p>

<ol>
    <li> The value properly of the desired symbolic link name. </li>
    <li> The full path of the binary Java. </li>
    <li> Lastly, specifying the level of priority associated with it. </li>
</ol>


<p>For example:</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">update-alternatives <span class="p">&amp;</span>ndash<span class="p">;</span>install /usr/bin/java java /opt/jdk1.8/bin/java 1</code></pre></div></p>

<p>After typing the command above, you can use the parameter <strong>--list</strong> to confirming the update:</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">update-alternatives <span class="p">&amp;</span>ndash<span class="p">;</span>list java</code></pre></div></p>

<p>To change to a new version, execute <strong>update-alternatives</strong> with parameter <strong>--config</strong>, it will show a menu to you choice your option through
interactive way form:</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">update-alternatives <span class="p">&amp;</span>ndash<span class="p">;</span>config java</code></pre></div></p>

<p><img class="rigth" src="/images/output_update_alternatives_config.jpeg" width="1800" height="1800" title="&lsquo;output perl group&rsquo;" ></p>

<p>There is another non-interactive way to you choice the version, just setting with parameter <strong>--set</strong> or <strong>-s</strong>, instead of <strong>--config</strong>, as below:</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">sudo update-alternatives <span class="p">&amp;</span>ndash<span class="p">;</span><span class="nb">set </span>java /opt/jdk1.8/bin/java</code></pre></div></p>

<p>For more info, enter with:</p>

<p><strong> <em>man update-alternatives</em> </strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MultiThreading - Future in Java]]></title>
    <link href="http://di0.github.io/blog/2017/11/06/multithreading-future-in-java/"/>
    <updated>2017-11-06T02:32:36-02:00</updated>
    <id>http://di0.github.io/blog/2017/11/06/multithreading-future-in-java</id>
    <content type="html"><![CDATA[<p>When we need performing concurrent tasks in Java, we have available since the firsts versions, the Runnable interface. This interface have only method
named <strong>run</strong>. That method must be implemented by <!--more--> participants that wants works with parallel tasks.</p>

<p>Look the signature this method:</p>

<pre><code class="java">public interface Runnable
{
    public void run();
}
</code></pre>

<p>Como observado acima através de sua a assinatura, não há uma maneira de recuperar o valor de uma operação ou ainda, nem mesmo é possível
lançar uma exceção.</p>

<p>Para casos em que há tarefas que devolvem informações, será necessário o auxílio de um método ou uma propriedade compartilhada para recuperar
armazenar o valor desejado após a execução de uma tarefa.</p>

<p>Conforme exemplo abaixo:</p>

<pre><code class="java">class Foo implements Runnable {

    private String operation ;

    public String getOperation() {
        return operation;
    }

    public void run() {
        operation = operation();
    }
}
</code></pre>

<p>Não há problema algum com o uso do exemplo acima, contudo, existe uma solução mais adequada e viável para esse caso, através da
utilização da interface nomeada Callable.</p>

<p>Callable é uma interface que foi disponibilizada na versão J2SE 5.0, ela oferece um método
chamado call(). Através desse método, agora é possível recuperar valores retornados do tipo Object, ou mais
especificamente, qualquer tipo devido à sua construção genericamente parametrizada.</p>

<pre><code class="java">public interface Callable
{
     V call() throws Exception;
}
</code></pre>

<p>Pelo fato de não ser possível trabalhar com Callable com auxílio da classe Thread, a qual implementa apenas
Runnable, é usado ao invés disso, o suporte da interface ExecutorService para executar objetos do tipo Callable.</p>

<p>Através de ExecutorService, é utilizada o método submit, que aceita como parâmetro um Callable e retorna uma
interface Future, responsável por disponibilizar resultados através de operações assíncronas, a assinatura do
método submit é descrito abaixo:
<code>java
Future submit( Callable task )
</code></p>

<p>Quando uma tarefa é executada através de Callable, sendo ela “submitada”, pelo método submit(), é retornado a
interface Future e, através dela, é usado o método get, para recuperar os valores processados.</p>

<p>O método get é mutuamente excluído, até que a tarefa termine, semântica idêntica ao Join da classe Thread.</p>

<p>Uma demonstração do uso de Callable é exibido no código seguinte. Esse teste se baseia em um processo se
dividir em duas linhas de execuções, e realizar a incrementação do valor e exibi-lo logo em seguida. Por exemplo:</p>

<pre><code class="java">import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

class Foo implements Callable
{
        private static int value = 0;

        public Integer call()
        {
                try
                {
                        value++;
                        Thread.sleep(600);
                }
                catch ( InterruptedException e )
                {
                        // stuff
                }

                return value;
        }
}
</code></pre>

<pre><code class="java">public class Test
{
        public static void main( String[] args ) throws Exception
        {
                ExecutorService s = Executors.newFixedThreadPool( 1 );
                Callable c1 = new Foo();
                Callable c2 = c1;

                for ( int count = 1; count &lt;= 5; count++ )
                {
                        Future f1 = s.submit( c1 );
                        Future f2 = s.submit( c2 );

                        Integer i1 = f1.get();
                        System.out.println( i1 + " -&gt; Executed by c1 reference" );

                        Integer i2 = f2.get();
                        System.out.println( i2 + " -&gt; Executed by c2 reference");
                }

                s.shutdown();
        }
}
</code></pre>

<p>No trecho de código acima, na linhas 25 é utilizado o método estático newFixedThreadPool(), da classe Executors. Esse método
cria uma espécie de mina de Threads, e diz a quantidade de tarefas que serão executadas a um
determinado momento. O argumento 1, diz que apenas uma Thread executará por vez.</p>

<p>Na linha 26, a variável c1 referencia um objeto que tem Callable a serem executados e na linha seguinte, uma outra
variável(c2) referencia a mesma instância, para que seja possível demonstrar duas linhas de execuções, atuando na mesma tarefa.</p>

<p>No loop, as duas threads serão “submitadas” e executadas e seus valores recuperadas pelo método get() da
interface Future e, no fim do loop, o serviço executor é finalizado com método shutdown(), o resultado da operação será:</p>

<pre><code class="bash">1 -&gt; Executed by c1 reference
2 -&gt; Executed by c2 reference
3 -&gt; Executed by c1 reference
4 -&gt; Executed by c2 reference
5 -&gt; Executed by c1 reference
6 -&gt; Executed by c2 reference
7 -&gt; Executed by c1 reference
8 -&gt; Executed by c2 reference
9 -&gt; Executed by c1 reference
10 -&gt; Executed by c2 reference
</code></pre>

<p>De acordo o que foi passado para o método Executors.newFixedThreadPool( 1 ), apenas uma linha foi
executada por tarefa. Caso o parâmetro seja alterado para 2, a saída será algo como:</p>

<pre><code class="bash">2 -&gt; Executed by c1 reference
2 -&gt; Executed by c2 reference
4 -&gt; Executed by c1 reference
4 -&gt; Executed by c2 reference
6 -&gt; Executed by c1 reference
6 -&gt; Executed by c2 reference
8 -&gt; Executed by c1 reference
8 -&gt; Executed by c2 reference
10 -&gt; Executed by c1 reference
10 -&gt; Executed by c2 reference
</code></pre>
]]></content>
  </entry>
  
</feed>
