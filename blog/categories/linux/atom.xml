<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | Developer's Lab]]></title>
  <link href="http://di0.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://di0.github.io/"/>
  <updated>2018-04-30T02:22:17-03:00</updated>
  <id>http://di0.github.io/</id>
  <author>
    <name><![CDATA[Diogo Pinto]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Grep Command Show Only File Name]]></title>
    <link href="http://di0.github.io/blog/2018/04/30/grep-command-show-only-file-name/"/>
    <updated>2018-04-30T00:48:26-03:00</updated>
    <id>http://di0.github.io/blog/2018/04/30/grep-command-show-only-file-name</id>
    <content type="html"><![CDATA[<p>With <strong>grep</strong> and <strong>cut</strong> delimiter command we can get only file name where the occurrence of the input match. Bellow an<!--more-->
example:</p>

<pre><code class="bash">grep -Rn "foo" * | cut -f1 -d:
</code></pre>

<p><strong>output</strong></p>

<p><img class="rigth" src="/images/output_grep_cut.jpeg" width="1800" height="1800" title="&lsquo;output grep&rsquo;" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Replace With Stream Editor(AKA Sed)]]></title>
    <link href="http://di0.github.io/blog/2018/04/28/replace-with-stream-editor-aka-sed/"/>
    <updated>2018-04-28T14:08:18-03:00</updated>
    <id>http://di0.github.io/blog/2018/04/28/replace-with-stream-editor-aka-sed</id>
    <content type="html"><![CDATA[<p>The <strong>sed</strong> is command-line utility editor, which filtering and transforming text. Bellow an example of how works <!--more--> replacement order:</p>

<pre><code class="bash">sed -i 's/input/output/g' some_file
</code></pre>

<p><em>where:</em></p>

<p><li> i = &ndash;in-place, edit <strong>file.txt</strong> and save it.</li>
<li> s = substitute statement.</li>
<li> input = original match case.</li>
<li> output = the match replace it with.</li>
<li> g = global(replace all occurrence, instead of first occurrence).</li>
<li> some_file = some target file.</li></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Searching Exact Word With Vi Editor]]></title>
    <link href="http://di0.github.io/blog/2018/01/31/searching-exact-word-with-vi-editor/"/>
    <updated>2018-01-31T15:41:24-02:00</updated>
    <id>http://di0.github.io/blog/2018/01/31/searching-exact-word-with-vi-editor</id>
    <content type="html"><![CDATA[<p>Below I explain you how search an exact word in VI(M), what you just need to do, is to put there on between <!--more--> regular expression
\&lt; and \>, for example:</p>

<pre><code class="bash">/\&lt;FOO\&gt;
</code></pre>

<p>It will match only words whose name is <strong>FOO</strong>, rather than, <strong>FOOBAR</strong>, <strong>BARFOO</strong>, etc.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Determining Symbolic Links Java With Update-alternatives Command]]></title>
    <link href="http://di0.github.io/blog/2018/01/17/determining-symbolic-links-java-with-update-alternatives-command/"/>
    <updated>2018-01-17T16:01:01-02:00</updated>
    <id>http://di0.github.io/blog/2018/01/17/determining-symbolic-links-java-with-update-alternatives-command</id>
    <content type="html"><![CDATA[<p>With the utility <strong>update-alternatives</strong>, is possible you set versions of the Java installed in your Operating System Linux(which supports it),
without need add or <!--more--> remove symbolic link manually. To list one or more Java version available in target system, you can just typing the
command <strong>update-alternatives</strong>, adding the argument <strong>--list</strong>, together with name of the symlink(Symbolic Link) desired. For example:</p>

<pre><code class="bash">update-alternatives --list java
</code></pre>

<p>Where <strong>java</strong> is the name of the symbolic link.</p>

<p>Is possible too, you to install a new version, case it hasn&rsquo;t on the list of the <strong>update-alternatives</strong>. To install a new version of the Java on the
list, you just need use the parameter <strong>--install</strong>, setting the following arguments:</p>

<pre><code>1) The value properly of the desired symbolic link name.
2) The full path of the binary Java.
3) Lastly, specifying the level of priority associated with it.
</code></pre>

<p>For example:</p>

<pre><code class="bash">update-alternatives --install /usr/bin/java java /opt/jdk1.8/bin/java 1
</code></pre>

<p>After typing the command above, you can use the parameter <strong>--list</strong> to confirm the update:</p>

<pre><code class="bash">update-alternatives --list java
</code></pre>

<p>To change to a new version, execute <strong>update-alternatives</strong> with parameter <strong>--config</strong>, it will show a menu to you choice your option through
interactive way form:</p>

<pre><code class="bash">update-alternatives --config java
</code></pre>

<p>There is another non-interactive way to you choice the version, just setting with parameter <strong>--set</strong> or <strong>-s</strong>, instead of <strong>--config</strong>, as below:</p>

<pre><code class="bash">sudo update-alternatives --set java /opt/jdk1.8/bin/java
</code></pre>

<p>For more info, enter with:</p>

<pre><code class="bash">man update-alternatives
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Grep - Exclude Directories and Files From Recursive Searches]]></title>
    <link href="http://di0.github.io/blog/2016/08/21/grep-exclude-directories-and-files-from-recursive-searches/"/>
    <updated>2016-08-21T04:17:15-03:00</updated>
    <id>http://di0.github.io/blog/2016/08/21/grep-exclude-directories-and-files-from-recursive-searches</id>
    <content type="html"><![CDATA[<p>Simplesmente, usando o parâmetro <strong>--exclude-dir</strong> para excluir <!--more--> diretórios
e/ou <strong>--exclude</strong> para excluir arquivos ou extensões de arquivos, tal como exemplo:</p>

<pre><code class="bash">grep -r [Win] --color --exclude-dir=test --exclude-dir=target \
--exclude-dir=bin --exclude=\*.xml --exclude=\*.svn "pesquisa" .
</code></pre>

<p>Ou ainda:</p>

<pre><code class="bash">$ grep -r [Win] --color --exclude-dir={test,target,bin} \
--exclude={*.xml,*.svn} "pesquisa" .
</code></pre>
]]></content>
  </entry>
  
</feed>
