<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | Developer's Lab]]></title>
  <link href="http://di0.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://di0.github.io/"/>
  <updated>2019-06-09T11:24:16-03:00</updated>
  <id>http://di0.github.io/</id>
  <author>
    <name><![CDATA[Diogo Pinto]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Locking User Account Linux]]></title>
    <link href="http://di0.github.io/blog/2018/05/11/locking-user-account-linux/"/>
    <updated>2018-05-11T12:48:04-03:00</updated>
    <id>http://di0.github.io/blog/2018/05/11/locking-user-account-linux</id>
    <content type="html"><![CDATA[<p>The following command will lock an user <!--more--> account:</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">passwd <span class="p">&amp;</span>ndash<span class="p">;</span>lock foo</code></pre></div></p>

<p>or simply</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">passwd -l foo</code></pre></div></p>

<p>Remember that, you should run the above command as root account.</p>

<p>If you want unlocking the account foo, just type the <strong>passwd</strong> command with <strong>-u</strong> or <strong>&ndash;unlock</strong> parameter, e.g:</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">passwd <span class="p">&amp;</span>ndash<span class="p">;</span>unlock foo</code></pre></div></p>

<p>or simply</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">passwd -u foo</code></pre></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Disable IPv6 on Linux]]></title>
    <link href="http://di0.github.io/blog/2018/04/30/disable-ipv6-on-linux/"/>
    <updated>2018-04-30T18:19:07-03:00</updated>
    <id>http://di0.github.io/blog/2018/04/30/disable-ipv6-on-linux</id>
    <content type="html"><![CDATA[<p><strong>IPv6</strong> protocol is not always available in the local area network(lan), to avoid your DHCP connection configure IPv6 in
your network card device, you can disable it through least <!--more--> two ways:</p>

<h3 style="color: #d3d378;font-size 8px">Command line</h3>


<p><strong>sysctl</strong> command is an Linux command that configures kernel parameters at runtime. You can display all
values currently available, typing <strong>sysctl -a</strong>. More details, see <em>sysctl manual page</em>.</p>

<p>Regarding configuration, with super admin user, type:</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">sysctl -w net.ipv6.conf.all.disable_ipv6<span class="o">=</span>1
sysctl -w sysctl -w net.ipv6.conf.default.disable_ipv6<span class="o">=</span>1</code></pre></div></p>

<p>If you want re-enable IPv6, issue the following commands:</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">sysctl -w net.ipv6.conf.all.disable_ipv6<span class="o">=</span>0
sysctl -w net.ipv6.conf.default.disable_ipv6<span class="o">=</span>0</code></pre></div></p>

<h3 style="color: #d3d378;font-size 8px">File configuration(Debian based distro)</h3>


<p>Another way, is through of the file configuration located under directory <strong>/etc/</strong>.
The file name is <strong>sysctl.conf</strong>, which is a simple file containing sysctl values to be read in and set by <strong>sysctl</strong>.</p>

<p>With super admin user, edit the file <span style="color:blue;font-weight:bold">/etc/sysctl.conf</span> and add the following lines:</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">net.ipv6.conf.all.disable_ipv6 <span class="o">=</span> 1
net.ipv6.conf.default.disable_ipv6 <span class="o">=</span> 1
net.ipv6.conf.lo.disable_ipv6 <span class="o">=</span> 1</code></pre></div></p>

<p>To disable, just remove the above lines.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Show Only File Name With Grep Command]]></title>
    <link href="http://di0.github.io/blog/2018/04/30/grep-command-show-only-file-name/"/>
    <updated>2018-04-30T00:48:26-03:00</updated>
    <id>http://di0.github.io/blog/2018/04/30/grep-command-show-only-file-name</id>
    <content type="html"><![CDATA[<p>With <strong>grep</strong> and <strong>cut</strong> delimiter command we can get only file name where the occurrence of the input match. Below an<!--more-->
example:</p>

<pre><code class="bash">grep -Rn "foo" * | cut -f1 -d:
</code></pre>

<p><strong>output</strong></p>

<p><img class="rigth" src="/images/output_grep_cut.jpeg" width="1800" height="1800" title="&lsquo;output grep&rsquo;" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Replace With Stream Editor(AKA Sed)]]></title>
    <link href="http://di0.github.io/blog/2018/04/28/replace-with-stream-editor-aka-sed/"/>
    <updated>2018-04-28T14:08:18-03:00</updated>
    <id>http://di0.github.io/blog/2018/04/28/replace-with-stream-editor-aka-sed</id>
    <content type="html"><![CDATA[<p>The <strong>sed</strong> is command-line utility editor, which filtering and transforming text. Below an example of how it works <!--more--> replacement order:</p>

<pre><code class="bash">sed -i 's/input/replacement/g' some_file
</code></pre>

<p><em>where:</em></p>

<p><li> <strong> <em>i</em> </strong> = &ndash;in-place, edit <strong>file.txt</strong> and save it.</li>
<li> <strong> <em>s</em> </strong> = substitute statement.</li>
<li> <strong> <em>input</em> </strong> = original match case.</li>
<li> <strong> <em>replacement</em> </strong> = matched replacement it with.</li>
<li> <strong> <em>g</em> </strong> = global(replace all occurrence, instead of first occurrence).</li>
<li> <strong> <em>some_file</em> </strong> = some target file.</li></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flush Contents of a Memcached Server]]></title>
    <link href="http://di0.github.io/blog/2018/04/25/flush-contents-of-a-memcached/"/>
    <updated>2018-04-25T22:12:26-03:00</updated>
    <id>http://di0.github.io/blog/2018/04/25/flush-contents-of-a-memcached</id>
    <content type="html"><![CDATA[<p>The two ways following examples, show us how flush old data from memcached server through
command line. We use netcat and <!--more--> telnet command to perform this job.</p>

<h4><u>Using netcat Command</u></h4>


<p><strong>netcat</strong> command is a simple unix utility which reads and writes data across network connections, using
TCP or UDP protocol. Below you can see how such commands works:</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">echo</span> <span class="p">&amp;</span>lsquo<span class="p">;</span>flush_all<span class="p">&amp;</span>rsquo<span class="p">;</span> <span class="p">|</span> nc localhost 11211
or
<span class="nb">echo</span> <span class="p">&amp;</span>lsquo<span class="p">;</span>flush_all<span class="p">&amp;</span>rsquo<span class="p">;</span> <span class="p">|</span> netcat localhost 11211</code></pre></div></p>

<p><em>another form way:</em></p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">nc 192.168.1.10 11211<span class="p">&amp;</span>lt<span class="p">;&amp;</span>lt<span class="p">;&amp;</span>lt<span class="p">;&amp;</span>ldquo<span class="p">;</span>flush_all<span class="p">&amp;</span>rdquo<span class="p">;</span></code></pre></div></p>

<p><em>with alias setting:</em></p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">alias </span><span class="nv">flush_mem_cache_server</span><span class="o">=</span><span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nb">echo</span> <span class="p">&amp;</span>lsquo<span class="p">;</span>flush_all<span class="p">&amp;</span>rsquo<span class="p">;</span> <span class="p">|</span> netcat 127.0.0.1 11211<span class="p">&amp;</span>rdquo<span class="p">;</span></code></pre></div></p>

<p>Now, just you run the alias <strong>flush_mem_cache_server</strong> in your bash shell.</p>

<h4><u>Using telnet Command</u></h4>


<p>We can as well use the telnet protocol via default port(11211) from memcached server, typing <strong>flush_all</strong>. For example:</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">telnet 192.168.1.10 11211</code></pre></div></p>

<p>then output will looks like:</p>

<p><img class="rigth" src="/images/output_telnet_memcached.jpeg" width="1800" height="1800" title="&lsquo;output perl group&rsquo;" ></p>
]]></content>
  </entry>
  
</feed>
