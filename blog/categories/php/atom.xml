<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Php | Dio's Blog]]></title>
  <link href="http://di0.github.io/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://di0.github.io/"/>
  <updated>2018-03-17T12:42:39-03:00</updated>
  <id>http://di0.github.io/</id>
  <author>
    <name><![CDATA[Diogo Pinto]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PHP - Reusing Code With Traits]]></title>
    <link href="http://di0.github.io/blog/2012/12/01/php-reusing-code-with-traits/"/>
    <updated>2012-12-01T22:21:08-02:00</updated>
    <id>http://di0.github.io/blog/2012/12/01/php-reusing-code-with-traits</id>
    <content type="html"><![CDATA[<p>Propósito geral dos Traits</p>

<p>A Orientação a Objetos em PHP, não trabalha com conceitos de herança múltipla. Apesar da herança múltipla não fazer
falta alguma em PHP(ou em qualquer outra linguagem), por trazer <!--more--> consigo mais desvantagens do que vantagens, como implementações difíceis, manutenção trabalhosa, acoplamento forte, baixa coesão e centenas de outros problemas, há ainda assim, a necessidade de se reutilizar recursos em diferentes locais, evitando rescrever trechos repetidos de códigos.</p>

<p>Traits são mecanismos que possibilitam o reuso de código, em um contexto relacional não vertical. Com traits, em uma
única classe é possível utilizar recursos que se tornam modulares e que são carregados conforme necessidade. A vantagem de
utilizar <strong>Traits</strong>, vai além da reutilização e, o grande destaque está em seu relacionamento com outros participantes que, ao
contrário da herança, não tem o relacionamento <em>&ldquo;É UM&rdquo;</em> e sim um talvez, se <em>&ldquo;COMPORTA(-SE) COMO&rdquo;</em>. Essa sútil diferença é de suma
importância, evitando os problemas citados anteriormente quando se faz o uso indiscriminado e / ou incorreto de uma ou muitas
extensões(o qual já foi citado não ser suportado no PHP), evitando-se relacionamentos excêntricos, <em>&ldquo;É UM&rdquo;</em>, onde por exemplo
uma classe Pessoa estende Database, formando o relacionamento Pessoa É UM Database, quando Pessoa, obviamente, não É UM Database.</p>

<p>Um exemplo simples para introduzir a sintaxe em torno das Traits:</p>

<pre><code class="php">trait Foo
{
    function firstName()
    {
        return 'James';
    }
}

trait Bar
{
    function lastName()
    {
        return 'Bond';
    }
}

class Baz
{
    use Foo, Bar;
}

$objBaz = new Baz();
$strResult  = 'My name is ';
$strResult .= $objBaz-&gt;lastName();
$strResult .= ", ";
$strResult .= $objBaz-&gt;firstName();
$strResult .= " ";
$strResult .= $objBaz-&gt;lastName();
$strResult .= "!\n";
echo $strResult;          // My name is Bond, James Bond!
</code></pre>

<p>Traits assemelham-se às classes, mais aproximadamente às classes abstratas, que não
podem ser instanciadas diretamente, todavia, seu principal objetivo é de reunir
grupo(s) de comportamentos(s) que serão reutilizadas em um ou diversos pontos.</p>

<p>Visão mais ampla</p>

<p>Um outro exemplo recorrente, ajuda a ilustrar melhor o propósito de Traits:</p>

<pre><code class="php">trait Singleton
{
    private static $instance;

    public static function getInstance()
    {
        if ( !( self::$instance instanceof self ) )
        {
            self::$instance = new self;
        }

        return self::$instance;
    }

    protected function __construct() { }

    private function __clone() { }

    private function __wakeup() { }
}

class DatabaseLoader
{
    use Singleton;
    {...}
}

class  FileLoader
{
    use Singleton;
    {...}
}
</code></pre>

<p>Nesse exemplo, tanto a classe DatabaseLoader, como FileLoader, se comportam como Singleton, e por ambas herdarem
esse comportamento, não é possível(devido aos construtores protegidos) criar novos objetos dessas:</p>

<pre><code class="php">$database = new DatabaseLoader();
$file = new FileLoader();
</code></pre>

<pre><code class="bash">PHP Fatal error: Call to protected DatabaseLoader::__construct() from invalid context ...
PHP Fatal error: Call to protected FileLoader::__construct() from invalid context ...
</code></pre>

<p>As classes DatabaseLoader e FileLoader tem comportamentos idênticos à Trait Singleton, portanto, para o efeito
desejado o correto será:</p>

<pre><code class="php">$databaseLoad_1 = DatabaseLoader::getInstance();
$databaseLoad_2 = DatabaseLoader::getInstance();

$fileLoad_1 = FileLoader::getInstance();
$fileLoad_2 = FileLoader::getInstance();

if ( $databaseLoad_1 instanceof $databaseLoad_2 )
    echo "Singleton is working";

if ( $fileLoad_1 instanceof $fileLoad_2 )
    echo "Singleton is working";
</code></pre>

<p>Isso reforça a grande cartada de Traits – possibilitar comportamentos aos participantes, ou seja, relacionamentos
do tipo comporta-se como. A leitura dessas classes seria algo adjacente a: DatabaseLoader e FileLoader não são
Singletons, não tem Singletons(usar singleton não é um contrato), mas se comportam como Singletons.</p>

<p>Futuramente, tanto DatabaseLoader como FileLoader, de maneira flexivelmente simples, poderiam deixar de se comportar
como Singletons, apenas deixando de usar(se comportar como) Trait Singleton.</p>

<p>Traits e Interface</p>

<p>Um exemplo usando Traits e Contrato:</p>

<pre><code class="php">class CSV
{
        public function Output() {
                // {...}

                return "CSV file contents has been read";
        }
}

//---------------------------------------------------------

class PDF
{
        public function Output() {
                // {...}

                return "PDF file contents has been read";
        }
}

//---------------------------------------------------------

trait LoaderCSV
{
        private $file;

        function __construct( $file )
    {
                $this-&gt;file = $file;
        }

        public function read() {
                $csv = new CSV($this-&gt;file);

                // {...}

                return $csv-&gt;Output();
        }
}

//---------------------------------------------------------

trait LoaderPDF
{
        private $file;

        function __construct( $file )
    {
                $this-&gt;file = $file;
        }

        public function read()
    {
                $pdf = new PDF($this-&gt;file);

                // {...}

                return $pdf-&gt;Output();
        }
}

//---------------------------------------------------------

interface ReaderFile
{
        public function read();
}

//---------------------------------------------------------

class PDFReaderFile implements ReaderFile
{
        use LoaderPDF;
}

//---------------------------------------------------------

class CSVReaderFile implements ReaderFile
{
        use LoaderCSV;
}

//---------------------------------------------------------

class LoaderContents
{
    private $contents;

    public function __construct( ReaderFile $rf )
    {
        $this-&gt;contents = $rf-&gt;read();
    }

    // {...}

    public function getContents()
    {
        return $this-&gt;contents;
    }
}

//---------------------------------------------------------

$filePDF = new LoaderContents(new PDFReaderFile("file.pdf"));
echo $filePDF-&gt;getContents() . "\n";  // PDF file contents has been read

$fileCSV = new LoaderContents(new CSVReaderFile("file.csv"));
echo $fileCSV-&gt;getContents() . "\n";  // CSV file contents has been read
</code></pre>

<p>Há alguns pontos a serem ressaltados, por exemplo, como é notado, as classes PDFReaderFile e CSVReaderFile tem
(uma interface) um ReaderFile, mas cada um se comporta(uma trait) de uma maneira. Nesse caso também, foi
possível realizar uma abstração encapsulada, pois, quem usa a classe LoaderContents, não tem conhecimentos de que
o contrato assinado está sob comportamentos ou uma implementação.</p>

<p>Os construtores de cada Traits são herdados, tendo os construtores dos participantes que usam essas
Traits, os mesmos comportamentos.</p>

<p>Traits e Autload</p>

<p>Também é possível utilizar Traits com autoload/spl_autload_register e a função trait_exists():</p>

<pre><code class="php">class ReaderFile
{
    use LoaderFile;
}

function __autoload( $name )
{
    $trait = $name.".php";

    if ( file_exists( $trait ) )
    {
        include_once( $trait );

        if ( !trait_exists( $name ) )
            throw new exception( "No trait exists" );
        }

    else
        throw new exception("No file exists");
}
</code></pre>

<p>Conclusão final</p>

<p>Há uma infinidade de maneiras de se usar Traits, como compor Traits dentro de Traits, criando uma hierarquia
de comportamentos. Sem dúvida, Traits trouxe para o PHP muito mais flexibilidade em todos os sentidos.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP - Correct Use of the Count Function]]></title>
    <link href="http://di0.github.io/blog/2011/12/02/php-correct-use-of-the-count-function/"/>
    <updated>2011-12-02T23:10:47-02:00</updated>
    <id>http://di0.github.io/blog/2011/12/02/php-correct-use-of-the-count-function</id>
    <content type="html"><![CDATA[<p>Comumente e erroneamente, a função <strong>count</strong> é chamada dentro de um laço de repetição, na
intenção de impor um limite de <!--more--> contagem em uma determinada rotina de repetição, um simples
exemplo desse caso seria:</p>

<pre><code class="php">$alfa = array( 1, 2, 3, 4, 5 );

for ( $i = 0; $i &lt;= count($alfa); $i++ )
       // codigo....
</code></pre>

<p>Veja que desnecessariamente, chama-se a cada interação da instrução for, a função count().</p>

<p>No contexto de se impor um limite, a forma correta seria fora do laço de repetição, chamar uma única vez a
função, atribuindo seu valor de retorno em uma variável e essa sim, será utilizada dentro da instrução de
repetição, segue:</p>

<pre><code class="php">$alfa = array( 1, 2, 3, 4, 5 );

$count = count( $alfa );

for ( $i = 0; $i &lt;= $count; $i++ )
      // codigo.... 
</code></pre>
]]></content>
  </entry>
  
</feed>
