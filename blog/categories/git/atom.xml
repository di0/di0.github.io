<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | Developer's Lab]]></title>
  <link href="http://di0.github.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://di0.github.io/"/>
  <updated>2018-09-18T10:43:50-03:00</updated>
  <id>http://di0.github.io/</id>
  <author>
    <name><![CDATA[Diogo Pinto]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rename Local and Remote Branch With Git]]></title>
    <link href="http://di0.github.io/blog/2018/09/17/rename-local-and-remote-branch-with-git/"/>
    <updated>2018-09-17T15:47:55-03:00</updated>
    <id>http://di0.github.io/blog/2018/09/17/rename-local-and-remote-branch-with-git</id>
    <content type="html"><![CDATA[<p>If you want rename a branch local and remote, follow these steps:<!--more--></p>

<p>First, rename the target branch:</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">git branch -m new-name</code></pre></div></p>

<p>Or, if by chance, you desire rename another branch, whose is not current branch, such as:</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">git branch -m old-branch-name new-branch-name</code></pre></div></p>

<p>Second, remove remote branch and push the new local branch:</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">git push origin :old-branch-name new-branch-name</code></pre></div></p>

<p>And finally, load the upstream branch for the new local branch:</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">git checkout new-branch-name
git push origin -u new-branch-name</code></pre></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating and Saving Stash List With Git]]></title>
    <link href="http://di0.github.io/blog/2018/09/15/create-and-save-stash-list/"/>
    <updated>2018-09-15T02:33:18-03:00</updated>
    <id>http://di0.github.io/blog/2018/09/15/create-and-save-stash-list</id>
    <content type="html"><![CDATA[<p>When stash the changes in a dirty working directory away, we can can give a more descriptive<br>
message on the command line when we create one. By <!--more-->example:</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">git stash save <span class="p">&amp;</span>ldquo<span class="p">;</span>Saving anything<span class="p">&amp;</span>rdquo<span class="p">;</span></code></pre></div></p>

<p>The above order, will push and holds on stack, the contents with descriptive message.</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">git stash list</code></pre></div></p>

<p>The command above, will show you, what is the branch name and what position that contents
was saved on stack.</p>

<p>So, to pick up first contents from stack, type:</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">git stash pop stash@<span class="o">{</span>0<span class="o">}</span></code></pre></div></p>

<p>or second</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">git stash pop stash@<span class="o">{</span>1<span class="o">}</span></code></pre></div></p>

<p>and son on &hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git - Revert Specific Files]]></title>
    <link href="http://di0.github.io/blog/2017/10/20/git-revert-specific-files/"/>
    <updated>2017-10-20T22:12:50-02:00</updated>
    <id>http://di0.github.io/blog/2017/10/20/git-revert-specific-files</id>
    <content type="html"><![CDATA[<p>Assumindo hipoteticamente que o hash para qual deseja reverter um ou mais arquivos é <strong>cf762e4c187b</strong>.</p>

<p>O comando abaixo irá reverter os arquivos foo1.txt e foo2.txt para o <!--more--> hash informado:</p>

<pre><code class="bash">git checkout cf762e4c187b -- dir/foo1.txt dir/foo2.txt
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reset All Commits From Repository Git]]></title>
    <link href="http://di0.github.io/blog/2015/09/23/reset-all-commits-from-repository-git/"/>
    <updated>2015-09-23T23:26:40-03:00</updated>
    <id>http://di0.github.io/blog/2015/09/23/reset-all-commits-from-repository-git</id>
    <content type="html"><![CDATA[<p>Para remover todos os históricos de commits e iniciar novamente o commit inicial, são dados os seguintes <!--more--> passos:</p>

<p>1) Remover o .git do repositorio(local) que deseja resetar</br>
2) Recriar o artefato do banco de dados git, seguindo os passos abaixo:</p>

<pre><code class="bash">$ cd Project
$ git init
// crie alguns arquivos ( eu clonei do SVN, em vez disso )
$ git add .
$ git commit -m "Initial commit"
</code></pre>

<p>3) Realizar o push para o servidor remoto<strong>(troque a url pela url do repositorio alvo)</strong>, forçando a sobreescrita:</p>

<pre><code class="bash">$ git remote add origin &lt;url&gt;
$ git push ‐‐force ‐‐set-upstream origin master
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ERROR: SERVER CERTIFICATE VERIFICATION FAILED]]></title>
    <link href="http://di0.github.io/blog/2015/09/23/error-server-certificate-verification-failed/"/>
    <updated>2015-09-23T02:05:40-03:00</updated>
    <id>http://di0.github.io/blog/2015/09/23/error-server-certificate-verification-failed</id>
    <content type="html"><![CDATA[<!--more-->


<p>No momento do clone:</p>

<pre><code class="bash">git clone https://develdio.com/SourceCode.git
</code></pre>

<p>Foi obtido o seguinte erro:</p>

<p><strong> Cloning into ‘SourceCode’… </strong></p>

<p><strong> fatal: unable to access &lsquo;<a href="https://develdio.com/SourceCode.git/">https://develdio.com/SourceCode.git/</a>&rsquo;: server certificate verification failed. </strong>
<strong> CAfile: /etc/ssl/certs/ca-certificates.crt CRLfile: none </strong></p>

<p>A falha ocorre devido o certificado não ser confiado.</p>

<p>Para solucionar o problema através utilitário do git na linha de comando, basta executar:</p>

<pre><code class="bash">git config --global http.sslverify false
</code></pre>
]]></content>
  </entry>
  
</feed>
