<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Developer's Lab]]></title>
  <link href="http://di0.github.io/atom.xml" rel="self"/>
  <link href="http://di0.github.io/"/>
  <updated>2020-01-22T21:24:58-03:00</updated>
  <id>http://di0.github.io/</id>
  <author>
    <name><![CDATA[Diogo Pinto]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Getting Column Name Bound With Unique Constraint]]></title>
    <link href="http://di0.github.io/blog/2019/06/09/show-column-name-bound-with-unique-constraint/"/>
    <updated>2019-06-09T10:34:38-03:00</updated>
    <id>http://di0.github.io/blog/2019/06/09/show-column-name-bound-with-unique-constraint</id>
    <content type="html"><![CDATA[<p>Here you can see, how we can get the column name bound with specific unique constraint name&hellip;<!--more-->For example:</p>

<div class="highlight"><pre><code class="language-mysql" data-lang="mysql"><span class="k">select</span> <span class="n">k</span><span class="p">.</span><span class="n">COLUMN_NAME</span>
    <span class="k">from</span> <span class="n">information_schema</span><span class="p">.</span><span class="n">KEY_COLUMN_USAGE</span> <span class="n">k</span>
    <span class="k">join</span> <span class="n">information_schema</span><span class="p">.</span><span class="n">TABLE_CONSTRAINTS</span> <span class="n">tc</span> <span class="k">on</span> <span class="n">k</span><span class="p">.</span><span class="n">TABLE_SCHEMA</span> <span class="o">=</span> <span class="n">tc</span><span class="p">.</span><span class="n">TABLE_SCHEMA</span> 
    <span class="k">and</span> <span class="n">k</span><span class="p">.</span><span class="n">TABLE_SCHEMA</span> <span class="o">=</span> <span class="n">tc</span><span class="p">.</span><span class="n">TABLE_SCHEMA</span>
    <span class="k">and</span> <span class="n">k</span><span class="p">.</span><span class="n">CONSTRAINT_NAME</span> <span class="o">=</span> <span class="n">tc</span><span class="p">.</span><span class="n">CONSTRAINT_NAME</span>
    <span class="k">where</span> <span class="n">k</span><span class="p">.</span><span class="n">table_name</span> <span class="o">=</span> <span class="s1">&#39;table_name&#39;</span>
    <span class="k">and</span> <span class="n">constraint_type</span> <span class="o">=</span> <span class="s1">&#39;UNIQUE&#39;</span><span class="p">;</span></code></pre></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Splitting a Subdirectory Into a New Repository]]></title>
    <link href="http://di0.github.io/blog/2019/02/28/splitting-a-subdirectory-into-a-new-repository/"/>
    <updated>2019-02-28T15:21:58-03:00</updated>
    <id>http://di0.github.io/blog/2019/02/28/splitting-a-subdirectory-into-a-new-repository</id>
    <content type="html"><![CDATA[<p>First you must to clone the repository target: <!--more--></p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">git clone https://lognull.com/PocProjectX.git</code></pre></div>


<p>Filter the directory that will be send to another repository</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">git filter-branch --prune-empty --subdirectory-filter src/main/java/com/develdio/poc/robot/remote/ develop</code></pre></div>


<p>Add the new URL in current repository</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">git remote <span class="nb">set</span>-url origin https://develdio.com/PocProjectXOnlyRemote.git</code></pre></div>


<p>Update remote refs along with associated objects</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">git push origin develop</code></pre></div>


<p>Undo the current changes and returns the original state:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">git reset --hard refs/original/refs/heads/develop</code></pre></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shell Script - Notifying When Directory Change]]></title>
    <link href="http://di0.github.io/blog/2018/09/30/shell-script-notifying-when-directory-change/"/>
    <updated>2018-09-30T04:23:46-03:00</updated>
    <id>http://di0.github.io/blog/2018/09/30/shell-script-notifying-when-directory-change</id>
    <content type="html"><![CDATA[<p>One of these days, I was needed to monitor a directory that constantly was modified. I had needed some way, get
something that could notify me when the structure(file system) from directory <!--more--> was modified. So, I
decided to write my own script, whose helped me with this task.</p>

<p>For it, was used the Linux <strong>stat</strong> utility, whose display the detailed status of a particular file or a file
system.</p>

<p>Below, is show you how it works:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c">#!/bin/bash</span>

<span class="nv">LTIME</span><span class="o">=</span><span class="sb">`</span>stat -c %Z .<span class="sb">`</span>

<span class="k">while</span> <span class="nb">true</span>
<span class="k">do</span>
        <span class="nv">ATIME</span><span class="o">=</span><span class="sb">`</span>stat -c %Z .<span class="sb">`</span>

        <span class="k">if</span> <span class="o">[[</span> <span class="s2">&quot;$ATIME&quot;</span> !<span class="o">=</span> <span class="s2">&quot;$LTIME&quot;</span> <span class="o">]]</span>
        <span class="k">then</span>
                <span class="nv">full_name</span><span class="o">=</span><span class="sb">`</span>/bin/ls <span class="p">|</span> head -1<span class="sb">`</span>
                <span class="nv">name</span><span class="o">=</span><span class="k">$(</span>basename <span class="s2">&quot;$full_name&quot;</span><span class="k">)</span>
                <span class="nv">extension</span><span class="o">=</span><span class="s2">&quot;${name##*.}&quot;</span>
                <span class="nv">final_name</span><span class="o">=</span><span class="s2">&quot;${name%.*}&quot;</span>

                <span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$extension&quot;</span> <span class="o">==</span> <span class="s2">&quot;txt&quot;</span> <span class="o">]</span>
                <span class="k">then</span>
                        <span class="k">if</span> <span class="o">[</span> ! -f <span class="nv">$final_name</span>.log <span class="o">]</span>
                        <span class="k">then</span>
                                touch <span class="nv">$final_name</span>.log
                                <span class="nb">echo</span> <span class="s2">&quot;Modified ATIME&quot;</span> &gt;&gt; <span class="nv">$final_name</span>.log
                        <span class="k">fi</span>
                <span class="k">fi</span>
                <span class="nv">LTIME</span><span class="o">=</span><span class="nv">$ATIME</span>
        <span class="k">fi</span>
        sleep 5
<span class="k">done</span></code></pre></div>


<p>So, the code above consists a script that checks if, a new text file was created in current directory.
If it has been, then, it verifies if already exists a file name called <strong>final_name.log</strong>, and case
it not exists, it will be created.</p>

<p>In begin, the script get the initial current time across stat command and holds it inside variable
LTIME. It variable later, will be used to compare with</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">LTIME</span><span class="o">=</span><span class="sb">`</span>stat -c %Z .<span class="sb">`</span></code></pre></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shallow and Deep Copy in C++ Language]]></title>
    <link href="http://di0.github.io/blog/2018/09/22/shallow-and-deep-copy-in-c-plus-plus/"/>
    <updated>2018-09-22T00:42:20-03:00</updated>
    <id>http://di0.github.io/blog/2018/09/22/shallow-and-deep-copy-in-c-plus-plus</id>
    <content type="html"><![CDATA[<p>When we create a new object in C++, the default constructor already do the process known as <strong>memberwise copy</strong> or
commonly <strong>shallow copy</strong>. It happens, because C++ compiler<!--more--> do not known enough about the current class that
is being evaluated in run time.</p>

<p>For instance, consider the hypothetical example below:</p>

<div class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="k">namespace</span> <span class="n">Network</span>
<span class="p">{</span>
        <span class="k">class</span> <span class="nc">IPConfig</span>
        <span class="p">{</span>
                <span class="k">private</span><span class="o">:</span>
                        <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">m_ip_address</span><span class="p">;</span>
                        <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">m_mask</span><span class="p">;</span>
                <span class="k">public</span><span class="o">:</span>
                        <span class="n">IPConfig</span><span class="p">(</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">ip_address</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">mask</span> <span class="p">);</span>

                        <span class="kt">char</span> <span class="o">*</span> <span class="n">get_ip_address</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
                        <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">get_mask</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
        <span class="p">}</span>
<span class="p">}</span></code></pre></div>


<p>And here is implementation of the one&rsquo;s own default constructor mentioned previously above:</p>

<div class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="n">Network</span><span class="o">::</span><span class="n">IPConfig</span><span class="o">::</span><span class="n">IPConfig</span><span class="p">(</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">ip_address</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">mask</span> <span class="p">)</span>
                <span class="o">:</span> <span class="n">m_ip_address</span><span class="p">(</span> <span class="n">ip_address</span> <span class="p">),</span> <span class="n">m_mask</span><span class="p">(</span> <span class="n">mask</span> <span class="p">)</span> <span class="p">{}</span></code></pre></div>


<p>How we can see above, we have an example code snippet that show a conventional code of a class that represent an
Internet Protocol(IP), used in network communication layer. This class have a default constructor that configure
the members variables with values given in your parameters.</p>

<p>When we create a new object, like this:</p>

<div class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="n">Network</span><span class="o">::</span><span class="n">IPConfig</span> <span class="n">ipconfig</span><span class="p">(</span> <span class="s">&quot;192.168.0.1&quot;</span><span class="p">,</span> <span class="s">&quot;255.255.0.0&quot;</span> <span class="p">);</span></code></pre></div>


<p>and then we do like this:</p>

<div class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="n">read_ipconfig</span><span class="p">(</span> <span class="n">ipconfig</span> <span class="p">);</span></code></pre></div>


<p>The compiler behind the curtains, will do something like it when we handle it on <strong>read_ipconfig</strong> function:</p>

<div class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="n">Network</span><span class="o">::</span><span class="n">IPConfig</span><span class="o">::</span><span class="n">IPConfig</span><span class="p">(</span> <span class="k">const</span> <span class="n">Network</span><span class="o">::</span><span class="n">IPConfig</span> <span class="o">&amp;</span> <span class="n">ipconfig</span> <span class="p">)</span>
<span class="p">{</span>
     <span class="n">m_address</span> <span class="o">=</span> <span class="n">ipconfig</span><span class="p">.</span><span class="n">m_ip_address</span><span class="p">;</span>
     <span class="n">m_mask</span> <span class="o">=</span> <span class="n">ipconfig</span><span class="p">.</span><span class="n">m_mask</span><span class="p">;</span>
<span class="p">}</span></code></pre></div>


<p>Look that the compiler created a new object, based from state another object of same type. Notice also that, the constructor
default is not initialized again, therefore, object already has a initialized state. As we have not our own copy
constructor, then the compiler use own way to performs member-wise copy, according shown above. Okay, so far we have not
problem here, it is a default feature of own C++ compiler.</p>

<p>However, the problem begins emerge when we work with allocation of memory blocks and we have a destructor in our class that
deallocates eventual blocks of memory previously allocated, when our object is no more referenced on present scope.</p>

<p>Let&rsquo;s go change the constructor previously shown above and implements it with allocate blocks, after we will deallocate the memory
of block allocated:</p>

<div class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="n">Network</span><span class="o">::</span><span class="n">IPConfig</span><span class="o">::</span><span class="n">IPConfig</span><span class="p">(</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">ip_address</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">mask</span> <span class="p">)</span>
                <span class="o">:</span> <span class="n">m_ip_address</span><span class="p">(</span> <span class="n">ip_address</span> <span class="p">),</span> <span class="n">m_mask</span><span class="p">(</span> <span class="n">mask</span> <span class="p">)</span>
<span class="p">{</span>
        <span class="n">assert</span><span class="p">(</span> <span class="n">m_ip_address</span> <span class="p">);</span>
        <span class="n">assert</span><span class="p">(</span> <span class="n">m_mask</span> <span class="p">);</span>

        <span class="kt">int</span> <span class="n">s_size</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">strlen</span><span class="p">(</span> <span class="n">m_ip_address</span> <span class="p">);</span>
        <span class="n">m_buffer_ip_address</span> <span class="o">=</span> <span class="p">(</span> <span class="kt">char</span> <span class="o">*</span> <span class="p">)</span> <span class="n">malloc</span><span class="p">(</span> <span class="n">s_size</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">);</span>
        <span class="k">for</span> <span class="p">(</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">s_size</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span> <span class="p">)</span>
                <span class="n">m_buffer_ip_address</span><span class="p">[</span> <span class="n">i</span> <span class="p">]</span> <span class="o">=</span> <span class="n">m_ip_address</span><span class="p">[</span> <span class="n">i</span> <span class="p">];</span>
<span class="p">}</span></code></pre></div>




<div class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="n">Network</span><span class="o">::</span><span class="n">IPConfig</span><span class="o">::~</span><span class="n">IPConfig</span><span class="p">()</span>
<span class="p">{</span>
        <span class="n">free</span><span class="p">(</span> <span class="n">m_buffer_ip_address</span> <span class="p">);</span>
<span class="p">}</span></code></pre></div>


<p>Now, let us suppose that we have a non-member function that validate if the ip address given by parameter it&rsquo;s an
Internet Protocol version 4 valid format:</p>

<div class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="kt">bool</span>
<span class="nf">is_valid_ipv4</span><span class="p">(</span> <span class="k">const</span> <span class="n">Network</span><span class="o">::</span><span class="n">IPConfig</span> <span class="n">ipconfig</span> <span class="p">)</span>
<span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">stringstream</span> <span class="n">ip</span><span class="p">(</span> <span class="n">ipconfig</span><span class="p">.</span><span class="n">get_ip_address</span><span class="p">()</span> <span class="p">);</span>
        <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">split_ip</span><span class="p">;</span>

        <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">field</span><span class="p">;</span>
        <span class="k">while</span><span class="p">(</span> <span class="n">std</span><span class="o">::</span><span class="n">getline</span><span class="p">(</span> <span class="n">ip</span><span class="p">,</span> <span class="n">field</span><span class="p">,</span> <span class="sc">&#39;.&#39;</span> <span class="p">)</span> <span class="p">)</span>
                <span class="n">split_ip</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span> <span class="n">field</span> <span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span> <span class="n">split_ip</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">==</span> <span class="mi">4</span> <span class="p">)</span>
                <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
<span class="p">}</span></code></pre></div>


<p>Without going into detail, for those that no known, the internet Protocol version 4 (IPv4), it&rsquo;s have the ip address format with
quad-dotted representations( 32 bits ). Roughly, it&rsquo;s separated by four dots. <strong><em>eg: 200.201.3.33</em></strong></p>

<p>After we validate and ensure that given ip address is an version 4 accept, we will create an another non-member function
that simply reads and show the ip address, together with your mask set up:</p>

<div class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="kt">void</span>
<span class="nf">read_ipv4</span><span class="p">(</span> <span class="k">const</span> <span class="n">Network</span><span class="o">::</span><span class="n">IPConfig</span> <span class="n">ipc</span> <span class="p">)</span>
<span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ipc</span><span class="p">.</span><span class="n">get_ip_address</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;/&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">ipc</span><span class="p">.</span><span class="n">get_mask</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
<span class="p">}</span></code></pre></div>


<p>Finally, let go create the main function that will go call the non-member function that will validate the ip address
and after, will read the value with mask concatenation:</p>

<div class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="kt">int</span>
<span class="nf">main</span><span class="p">(</span> <span class="kt">void</span> <span class="p">)</span>
<span class="p">{</span>
        <span class="n">Network</span><span class="o">::</span><span class="n">IPConfig</span> <span class="n">ipconfig</span><span class="p">(</span> <span class="s">&quot;192.168.1.30&quot;</span><span class="p">,</span> <span class="s">&quot;255.255.255.0&quot;</span> <span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span> <span class="n">is_valid_ipv4</span><span class="p">(</span> <span class="n">ipconfig</span> <span class="p">)</span> <span class="p">)</span>
                <span class="n">read_ipv4</span><span class="p">(</span> <span class="n">ipconfig</span> <span class="p">);</span>
        <span class="k">else</span>
                <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Invalid ipv4 format.&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
<span class="p">}</span></code></pre></div>


<p>Therefore, the expect output of the read_ipv4 function is the IP Address and your mask, like this:</p>

<p><strong>192.168.1.30/255.255.255.0</strong></p>

<p>but it did not work as expected, we had an unexpected behavior and nothing was read. Do you know why this happened?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;cstring&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cassert&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sstream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// The header</span>
</span><span class='line'><span class="k">namespace</span> <span class="n">Network</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>        <span class="k">class</span> <span class="nc">IPConfig</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>                <span class="k">private</span><span class="o">:</span>
</span><span class='line'>                        <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">m_ip_address</span><span class="p">;</span>
</span><span class='line'>                        <span class="kt">char</span> <span class="o">*</span><span class="n">m_buffer_ip_address</span><span class="p">;</span>
</span><span class='line'>                <span class="k">public</span><span class="o">:</span>
</span><span class='line'>                        <span class="n">IPConfig</span><span class="p">(</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="p">);</span>
</span><span class='line'>                        <span class="o">~</span><span class="n">IPConfig</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>                        <span class="kt">char</span> <span class="o">*</span> <span class="n">get_ip_address</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Constructor default. This will allocate memory blocks to</span>
</span><span class='line'><span class="cm"> * IP Address target.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">Network</span><span class="o">::</span><span class="n">IPConfig</span><span class="o">::</span><span class="n">IPConfig</span><span class="p">(</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">ip_address</span> <span class="p">)</span>
</span><span class='line'>                <span class="o">:</span> <span class="n">m_ip_address</span><span class="p">(</span> <span class="n">ip_address</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>        <span class="n">assert</span><span class="p">(</span> <span class="n">m_ip_address</span> <span class="p">);</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">s_size</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">strlen</span><span class="p">(</span> <span class="n">m_ip_address</span> <span class="p">);</span>
</span><span class='line'>        <span class="n">m_buffer_ip_address</span> <span class="o">=</span> <span class="p">(</span> <span class="kt">char</span> <span class="o">*</span> <span class="p">)</span> <span class="n">malloc</span><span class="p">(</span> <span class="n">s_size</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">s_size</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span> <span class="p">)</span>
</span><span class='line'>                <span class="n">m_buffer_ip_address</span><span class="p">[</span> <span class="n">i</span> <span class="p">]</span> <span class="o">=</span> <span class="n">m_ip_address</span><span class="p">[</span> <span class="n">i</span> <span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Destructor. This will destroy allocation.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">Network</span><span class="o">::</span><span class="n">IPConfig</span><span class="o">::~</span><span class="n">IPConfig</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>        <span class="n">free</span><span class="p">(</span> <span class="n">m_buffer_ip_address</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Gets the configured IP Address.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span>
</span><span class='line'><span class="n">Network</span><span class="o">::</span><span class="n">IPConfig</span><span class="o">::</span><span class="n">get_ip_address</span><span class="p">()</span> <span class="k">const</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">m_buffer_ip_address</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// The main part. Here we will go to test the Network IPConfig feature.</span>
</span><span class='line'>
</span><span class='line'><span class="kt">bool</span>
</span><span class='line'><span class="n">is_valid_ipv4</span><span class="p">(</span> <span class="k">const</span> <span class="n">Network</span><span class="o">::</span><span class="n">IPConfig</span> <span class="n">ipc</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">stringstream</span> <span class="n">ip</span><span class="p">(</span> <span class="n">ipc</span><span class="p">.</span><span class="n">get_ip_address</span><span class="p">()</span> <span class="p">);</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">split_ip</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">field</span><span class="p">;</span>
</span><span class='line'>        <span class="k">while</span><span class="p">(</span> <span class="n">std</span><span class="o">::</span><span class="n">getline</span><span class="p">(</span> <span class="n">ip</span><span class="p">,</span> <span class="n">field</span><span class="p">,</span> <span class="sc">&#39;.&#39;</span> <span class="p">)</span> <span class="p">)</span>
</span><span class='line'>                <span class="n">split_ip</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span> <span class="n">field</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span> <span class="n">split_ip</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">==</span> <span class="mi">4</span> <span class="p">)</span>
</span><span class='line'>                <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span>
</span><span class='line'><span class="n">read_ipv4</span><span class="p">(</span> <span class="k">const</span> <span class="n">Network</span><span class="o">::</span><span class="n">IPConfig</span> <span class="n">ipc</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ipc</span><span class="p">.</span><span class="n">get_ip_address</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span>
</span><span class='line'><span class="n">main</span><span class="p">(</span> <span class="kt">void</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>        <span class="n">Network</span><span class="o">::</span><span class="n">IPConfig</span> <span class="n">ipc</span><span class="p">(</span> <span class="s">&quot;192.168.1.30&quot;</span> <span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span> <span class="n">is_valid_ipv4</span><span class="p">(</span> <span class="n">ipc</span> <span class="p">)</span> <span class="p">)</span>
</span><span class='line'>                <span class="n">read_ipv4</span><span class="p">(</span> <span class="n">ipc</span> <span class="p">);</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>                <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Invalid ipv4 format.&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the main function, we create a Network::IPConfig type, configured with ip address 192.168.1.30 and, soon after,
we validate if it&rsquo;s a valid IP Address format version 4. The IP address version 4, is separeted by 4 dots, if this
match, the is_valid_ipv4 function will return true, otherwise false.</p>

<p>So, after, we will read the IP Address sets by constructor. Therefore, the expect output of the read_ipv4 function
is the IP Address 192.168.1.30, but, we have a unexpected behavior. Why did this happen?</p>

<p>It happens, because the compiler</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reading Parameters From Function - C]]></title>
    <link href="http://di0.github.io/blog/2018/09/21/reading-parameters-from-function-c/"/>
    <updated>2018-09-21T23:00:41-03:00</updated>
    <id>http://di0.github.io/blog/2018/09/21/reading-parameters-from-function-c</id>
    <content type="html"><![CDATA[<p>In this post, I was write as we can get the parameters given to a function in language C, using
stdarg library, that declares a type va_list and defines three macros for<!--more--> stepping
through  a list of arguments whose number and types are not known to the called function.</p>

<p>Below is show the declared functions in stdarg:</p>

<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="cp">#include &lt;stdarg.h&gt;</span>

<span class="kt">void</span> <span class="nf">va_start</span><span class="p">(</span> <span class="kt">va_list</span> <span class="n">ap</span><span class="p">,</span> <span class="n">last</span> <span class="p">);</span>
<span class="n">type</span> <span class="nf">va_arg</span><span class="p">(</span> <span class="kt">va_list</span> <span class="n">ap</span><span class="p">,</span> <span class="n">type</span> <span class="p">);</span>
<span class="kt">void</span> <span class="nf">va_end</span><span class="p">(</span> <span class="kt">va_list</span> <span class="n">ap</span> <span class="p">);</span>
<span class="kt">void</span> <span class="nf">va_copy</span><span class="p">(</span> <span class="kt">va_list</span> <span class="n">dest</span><span class="p">,</span> <span class="kt">va_list</span> <span class="n">src</span> <span class="p">);</span></code></pre></div>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdarg.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">read_names</span><span class="p">(</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name_main</span><span class="p">,</span> <span class="p">...</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>        <span class="kt">va_list</span> <span class="n">args</span><span class="p">;</span>
</span><span class='line'>        <span class="n">va_start</span><span class="p">(</span> <span class="n">args</span><span class="p">,</span> <span class="n">name_main</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">char</span> <span class="o">*</span><span class="n">name1</span> <span class="o">=</span> <span class="n">va_arg</span><span class="p">(</span> <span class="n">args</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="p">);</span>
</span><span class='line'>        <span class="kt">char</span> <span class="o">*</span><span class="n">name2</span> <span class="o">=</span> <span class="n">va_arg</span><span class="p">(</span> <span class="n">args</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">fprintf</span><span class="p">(</span> <span class="n">stdout</span><span class="p">,</span> <span class="s">&quot;%s =&gt; %s and %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">name_main</span><span class="p">,</span> <span class="n">name1</span><span class="p">,</span> <span class="n">name2</span> <span class="p">);</span>
</span><span class='line'>        <span class="n">va_end</span><span class="p">(</span> <span class="n">args</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span>
</span><span class='line'><span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>        <span class="n">read_names</span><span class="p">(</span> <span class="s">&quot;Main name&quot;</span><span class="p">,</span> <span class="s">&quot;second name&quot;</span><span class="p">,</span> <span class="s">&quot;third name&quot;</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As shown above, we can see that use the function <strong>va_start</strong>, which is declared in stdarg.h header. This
function is responsible to get a varying number of arguments of varying types.</p>

<p>The <strong>var_start</strong> macro, initializes <strong>va_list</strong> for subsequent use by <strong>va_arg()</strong> and <strong>va_end()</strong>, and must be called
first.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rename Local and Remote Branch With Git]]></title>
    <link href="http://di0.github.io/blog/2018/09/17/rename-local-and-remote-branch-with-git/"/>
    <updated>2018-09-17T15:47:55-03:00</updated>
    <id>http://di0.github.io/blog/2018/09/17/rename-local-and-remote-branch-with-git</id>
    <content type="html"><![CDATA[<p>If you want rename a branch local and remote, follow these steps:<!--more--></p>

<p>First, rename the target branch:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">git branch -m new-name</code></pre></div>


<p>Or, if by chance, you desire rename another branch, whose is not current branch, do it such as:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">git branch -m old-branch-name new-branch-name</code></pre></div>


<p>Second, remove remote branch and push the new local branch:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">git push origin :old-branch-name new-branch-name</code></pre></div>


<p>And finally, load the upstream branch for the new local branch:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">git checkout new-branch-name
git push origin -u new-branch-name</code></pre></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Get Size of Array With C Language]]></title>
    <link href="http://di0.github.io/blog/2018/09/15/get-size-of-array-with-c-language/"/>
    <updated>2018-09-15T03:20:58-03:00</updated>
    <id>http://di0.github.io/blog/2018/09/15/get-size-of-array-with-c-language</id>
    <content type="html"><![CDATA[<p>Language C has not function available that recover size of array by default. However, we
can use a trick that do possible get such size. Look like on example below:<!--more--></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span>
</span><span class='line'><span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">a</span><span class="p">[</span> <span class="mi">99</span> <span class="p">];</span>
</span><span class='line'>        <span class="kt">size_t</span> <span class="n">n</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span> <span class="n">a</span> <span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span> <span class="kt">int</span> <span class="p">);</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span> <span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">n</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>All right, the output will be <strong>99</strong>. Thus, if you change the array to char type, for example, you can have
problems because the expression above use <strong>int</strong> type.</p>

<p>As see above, we know that, the C language use the unary operator function <strong>sizeof</strong>, that compute the size of
type(char, int, float, double&hellip;) in compile time. So, the <strong>int</strong> type has a different size of <strong>char</strong> type.
Also, the result of expression can be different relative from machine architecture. eg: 32 bits or 64 bits.</p>

<p>Then, to avoid this, we should use something like this way:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span>
</span><span class='line'><span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">a</span><span class="p">[</span> <span class="mi">99</span> <span class="p">];</span>
</span><span class='line'>        <span class="kt">size_t</span> <span class="n">n</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span> <span class="n">a</span> <span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span> <span class="n">a</span><span class="p">[</span> <span class="mi">0</span> <span class="p">]</span> <span class="p">);</span> <span class="c1">// Here, we get the type of array</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span> <span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">n</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In example above, we get the first field of the array(<strong><em>sizeof(a[0])</em></strong>), instead to compute by type(<strong><em>sizeof(int)</em></strong>). It was
sufficient to compute array size, independent of data type her. Notice also that, this became more generic expression.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pointer to Function With C/C++]]></title>
    <link href="http://di0.github.io/blog/2018/09/15/c-c++-pointer-to-function/"/>
    <updated>2018-09-15T03:14:27-03:00</updated>
    <id>http://di0.github.io/blog/2018/09/15/c-c++-pointer-to-function</id>
    <content type="html"><![CDATA[<p>Like any entity stored in memory, a function also has your own address and other resources stored on dynamic memory
of operation system.<!--more-->
Therefore, is possible have a pointer variable that pointer to the address to function stored on memory. The syntax to
a pointer to function basically resembles this:</p>

<p><span style="color:teal;font-weight:bold">type_return (*variable_name)( type data of one and/or more parameters or no parameter )</span></p>

<p>For example:</p>

<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="kt">int</span> <span class="p">(</span> <span class="o">*</span><span class="n">pointer_f</span> <span class="p">)(</span> <span class="kt">int</span> <span class="p">);</span></code></pre></div>


<p>In above example, we create a pointer that points to a function that has a type integer as parameter and return a type
integer. Notice that, we use parentheses in the function declaration to alter precedence, which is greater than the asterisk(*), otherwise, without
this, the compiler interprets the declaration as a <strong>function</strong> that will return an integer type and get an integer as parameter, look how:</p>

<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="kt">int</span> <span class="o">*</span><span class="nf">pointer_f</span><span class="p">(</span> <span class="kt">int</span> <span class="p">);</span></code></pre></div>


<p>As previously described, we can use this pointer to a function that has an integer type parameter and also returns an integer type.
See like it works:</p>

<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="kt">int</span> <span class="nf">calculate_ip_broadcast</span><span class="p">(</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">subnet</span> <span class="p">)</span>
<span class="p">{</span>
    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">bits</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span> <span class="n">remove_dots</span><span class="p">(</span> <span class="n">subnet</span> <span class="p">)</span> <span class="p">)</span> <span class="o">^</span> <span class="mh">0xffffffff</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">bits</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">pointer_f</span> <span class="o">=</span> <span class="n">calculate_ip_broadcast</span><span class="p">;</span></code></pre></div>


<p>Notice that <strong>pointer_f</strong> now, points to the address from <strong>calculate_ip_broadcast</strong> function. Once pointed to target function, we can
invoke the function through pointer, like any another function invocation:</p>

<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="kt">int</span> <span class="n">r</span> <span class="o">=</span> <span class="n">pointer_f</span><span class="p">(</span> <span class="s">&quot;172.16.16.0&quot;</span> <span class="p">);</span></code></pre></div>


<p>or, if we prefer, we may:</p>

<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="kt">int</span> <span class="n">r</span> <span class="o">=</span> <span class="p">(</span> <span class="o">*</span><span class="n">pointer_f</span> <span class="p">)(</span> <span class="s">&quot;172.16.16.0&quot;</span> <span class="p">);</span></code></pre></div>


<p>With pointer function, we can work with <strong>call back</strong> techniques, allow us perform tasks complex of form flexible.</p>

<h3 style="color:navy;">More about function pointer</h3>


<p>Now that we known how works function pointer, let&rsquo;s go learn more about this.</p>

<p>In C language we can work with function inside another as parameter, hypothetically consider the following code sample:</p>

<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="kt">int</span> <span class="o">*</span> <span class="nf">on_calculate</span><span class="p">(</span> <span class="kt">int</span> <span class="n">f_calculate</span><span class="p">(</span> <span class="kt">int</span> <span class="n">value</span> <span class="p">)</span> <span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// ... something</span>
    <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">f_calculate</span><span class="p">(</span> <span class="mh">0x00</span> <span class="p">);</span>
    <span class="kt">int</span> <span class="o">*</span><span class="n">p_result</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">result</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">p_result</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">calculate_form_one</span><span class="p">(</span> <span class="kt">int</span> <span class="n">value</span> <span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">exp</span> <span class="o">=</span> <span class="n">value</span> <span class="o">/</span> <span class="mh">0xff</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">exp</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">calculate_form_two</span><span class="p">(</span> <span class="kt">int</span> <span class="n">value</span> <span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">exp</span> <span class="o">=</span> <span class="p">(</span> <span class="n">value</span> <span class="o">/</span> <span class="mh">0xff</span> <span class="p">)</span> <span class="o">*</span> <span class="mh">0xff</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">exp</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span>
<span class="nf">main</span><span class="p">(</span> <span class="kt">void</span> <span class="p">)</span>
<span class="p">{</span>
    <span class="cm">/*</span>
<span class="cm">    * Let just passing function reference name, whose will invoke later.</span>
<span class="cm">    */</span>

    <span class="c1">// this way:</span>

    <span class="kt">int</span> <span class="o">*</span><span class="n">result</span> <span class="o">=</span> <span class="n">on_calculate</span><span class="p">(</span> <span class="n">calculate_form_one</span> <span class="p">);</span>
    <span class="n">fprint</span><span class="p">(</span> <span class="n">stdout</span><span class="p">,</span> <span class="s">&quot;Result: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">*</span><span class="n">result</span> <span class="p">);</span>

    <span class="c1">// or</span>

    <span class="n">result</span> <span class="o">=</span> <span class="n">on_calculate</span><span class="p">(</span> <span class="n">calculate_form_two</span> <span class="p">);</span>
    <span class="n">fprint</span><span class="p">(</span> <span class="n">stdout</span><span class="p">,</span> <span class="s">&quot;Result: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">*</span><span class="n">result</span> <span class="p">);</span>
    
<span class="p">}</span></code></pre></div>


<p>We should not worry on details, just focus how it is possible and how we work with function inside another function as parameter.</p>

<p>Therefore, the following code snippet below, shows us a pointer to a function that get an another function
pointer as parameter:</p>

<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="kt">int</span> <span class="o">*</span> <span class="p">(</span> <span class="o">*</span><span class="n">pointer_f</span> <span class="p">)(</span> <span class="kt">int</span> <span class="p">(</span> <span class="o">*</span><span class="n">inside_pointer_f</span> <span class="p">)(</span> <span class="kt">int</span> <span class="p">)</span> <span class="p">);</span></code></pre></div>


<p>Okay, that is really very obscure&hellip; this should to be explained:</p>

<p><strong>pointer_f</strong> is the  pointer variable name that receive another function pointer called <strong>inside_pointer_f</strong> as parameter that
receives an int and return int. The <strong>pointer_f</strong> pointer then, finally return a pointer to integer type.</p>

<p>So, with the pointer <strong>pointer_f</strong> quoted previously, we are able to point to the function like it:</p>

<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="kt">int</span> <span class="o">*</span> <span class="nf">on_calculate</span><span class="p">(</span> <span class="kt">int</span> <span class="n">calculate</span><span class="p">(</span> <span class="kt">int</span> <span class="n">value</span> <span class="p">)</span> <span class="p">);</span></code></pre></div>


<p>Look as this is possible:</p>

<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="kt">int</span> <span class="o">*</span> <span class="p">(</span> <span class="o">*</span><span class="n">pointer_f</span> <span class="p">)(</span> <span class="kt">int</span> <span class="p">(</span> <span class="o">*</span><span class="n">inside_pointer_f</span> <span class="p">)(</span> <span class="kt">int</span> <span class="p">)</span> <span class="p">);</span>
<span class="n">pointer_f</span> <span class="o">=</span> <span class="n">on_calculate</span><span class="p">;</span></code></pre></div>


<p>Then, we invoke this way:</p>

<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="n">printf</span><span class="p">(</span> <span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">*</span><span class="n">pointer_f</span><span class="p">(</span> <span class="n">some_calculate_function</span> <span class="p">)</span> <span class="p">);</span></code></pre></div>


<p>Above, we pass the function responsible by calculate, through function pointer. Notice that this becomes so much
flexible, we need just give calculate responsible function, then, we call back as required:</p>

<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="n">printf</span><span class="p">(</span> <span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">*</span><span class="n">pointer_f</span><span class="p">(</span> <span class="n">calculate_form_one</span> <span class="p">)</span> <span class="p">);</span>
<span class="n">printf</span><span class="p">(</span> <span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">*</span><span class="n">pointer_f</span><span class="p">(</span> <span class="n">calculate_form_two</span> <span class="p">)</span> <span class="p">);</span>
<span class="c1">// and so on...</span></code></pre></div>


<p>The declaration <strong>int * ( <em>pointer_f )( int ( </em>inside_pointer_f )( int ) )</strong> can be often times a confuse syntax and declare this every
time, is really so hard. Because of this, we can use the <strong>typedef</strong> reserved keyword, to define a type to hidden this complexity.</p>

<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="k">typedef</span> <span class="kt">int</span> <span class="o">*</span> <span class="p">(</span> <span class="o">*</span><span class="n">pointer_f</span> <span class="p">)(</span> <span class="kt">int</span> <span class="p">(</span> <span class="o">*</span><span class="n">inside_pointer_f</span> <span class="p">)(</span> <span class="kt">int</span> <span class="p">)</span> <span class="p">);</span></code></pre></div>


<p>Now we can use this form:</p>

<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="n">pointer_f</span> <span class="o">*</span> <span class="n">pointer_function</span><span class="p">;</span>
<span class="n">pointer_function</span> <span class="o">=</span> <span class="n">on_calculate</span><span class="p">;</span>
<span class="n">printf</span><span class="p">(</span> <span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">*</span><span class="n">pointer_function</span><span class="p">(</span> <span class="n">calculate_form_one</span> <span class="p">)</span> <span class="p">);</span>
<span class="n">printf</span><span class="p">(</span> <span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">*</span><span class="n">pointer_function</span><span class="p">(</span> <span class="n">calculate_form_two</span> <span class="p">)</span> <span class="p">);</span></code></pre></div>


<p>Below, follows a complete example:</p>

<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="cp">#include &lt;stdio.h&gt;</span>

<span class="cm">/*</span>
<span class="cm"> * Function pointer that returns a pointer to integer type. This function has</span>
<span class="cm"> * three parameters. One of them is a pointer to function that get two integers</span>
<span class="cm"> * parameters and that return an integer type. Anothers two parameters are an</span>
<span class="cm"> * integer types.</span>
<span class="cm"> */</span>
<span class="k">typedef</span> <span class="kt">int</span> <span class="o">*</span> <span class="p">(</span> <span class="o">*</span><span class="n">pointer_f</span> <span class="p">)(</span> <span class="kt">int</span> <span class="p">(</span> <span class="o">*</span><span class="n">inside_pointer_f</span> <span class="p">)(</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span> <span class="p">),</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span> <span class="p">);</span>

<span class="kt">int</span> <span class="o">*</span>
<span class="nf">on_calculate</span><span class="p">(</span> <span class="kt">int</span> <span class="n">calculate</span><span class="p">(</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span> <span class="p">),</span> <span class="kt">int</span> <span class="n">valueX</span><span class="p">,</span> <span class="kt">int</span> <span class="n">valueY</span> <span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">calculate</span><span class="p">(</span> <span class="n">valueX</span><span class="p">,</span> <span class="n">valueY</span> <span class="p">);</span>
    <span class="kt">int</span> <span class="o">*</span><span class="n">p_result</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">result</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">p_result</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span>
<span class="nf">multiplication</span><span class="p">(</span> <span class="kt">int</span> <span class="n">valueX</span><span class="p">,</span> <span class="kt">int</span> <span class="n">valueY</span> <span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">valueX</span> <span class="o">*</span> <span class="n">valueY</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span>
<span class="nf">addition</span><span class="p">(</span> <span class="kt">int</span> <span class="n">valueX</span><span class="p">,</span> <span class="kt">int</span> <span class="n">valueY</span> <span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">valueX</span> <span class="o">+</span> <span class="n">valueY</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span>
<span class="nf">subtraction</span><span class="p">(</span> <span class="kt">int</span> <span class="n">valueX</span><span class="p">,</span> <span class="kt">int</span> <span class="n">valueY</span> <span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">valueX</span> <span class="o">-</span> <span class="n">valueY</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span>
<span class="nf">division</span><span class="p">(</span> <span class="kt">int</span> <span class="n">valueX</span><span class="p">,</span> <span class="kt">int</span> <span class="n">valueY</span> <span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">valueX</span> <span class="o">/</span> <span class="n">valueY</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span>
<span class="nf">main</span><span class="p">(</span> <span class="kt">void</span> <span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// References the function.</span>
    <span class="n">pointer_f</span> <span class="n">pointer_function</span> <span class="o">=</span> <span class="n">on_calculate</span><span class="p">;</span>

    <span class="c1">// Now we can to dereferences the function and gives it another</span>
    <span class="c1">// function as parameter that we desired to calculate.</span>

    <span class="n">printf</span><span class="p">(</span> <span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">*</span><span class="n">pointer_function</span><span class="p">(</span> <span class="n">multiplication</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">5</span> <span class="p">)</span> <span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span> <span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">*</span><span class="n">pointer_function</span><span class="p">(</span> <span class="n">addition</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">7</span> <span class="p">)</span> <span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span> <span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">*</span><span class="n">pointer_function</span><span class="p">(</span> <span class="n">subtraction</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">2</span> <span class="p">)</span> <span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span> <span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">*</span><span class="n">pointer_function</span><span class="p">(</span> <span class="n">division</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">3</span> <span class="p">)</span> <span class="p">);</span>
<span class="p">}</span></code></pre></div>


<p>And, the expected output respectively are:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">25
17
3
5</code></pre></div>




<h3 style="color:navy;">Returning pointer to function</h3>


<p>It is possible also, returns pointer to function, according syntax above:</p>

<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="kt">int</span><span class="p">(</span> <span class="o">*</span><span class="n">return_point_to_function</span><span class="p">()</span> <span class="p">)()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="p">(</span> <span class="o">*</span><span class="n">pnt_fn_ret_integer_type</span> <span class="p">)()</span> <span class="o">=</span> <span class="n">some_function_that_return_int</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">pnt_fn_ret_integer_type</span><span class="p">;</span>
<span class="p">}</span></code></pre></div>


<p>Is important emphasizes that, rather than we use &ldquo;int <strong>( *return_point_to_function )()</strong>&rdquo;, we use the
<strong>parentheses</strong> after name <strong>return_point_to_function</strong>, because else, the compiler could to intepret
it as a declaration of pointer to a function and not a function that returns a pointer to function.</p>

<p>Let&rsquo;s go see a practice example. Let us suppose that we have this functions:</p>

<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="kt">int</span>
<span class="nf">get_number_of_users_actives</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">n_users_actives</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span>
<span class="nf">get_number_of_users_inactives</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">n_users_inactives</span><span class="p">;</span>
<span class="p">}</span></code></pre></div>


<p>With our function that returns a pointer to function previously quoted, we could do something like it:</p>

<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="kt">int</span>
<span class="p">(</span> <span class="o">*</span><span class="n">get_number_of_users</span><span class="p">()</span> <span class="p">)()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="p">(</span> <span class="o">*</span><span class="n">pointer_function</span> <span class="p">)()</span> <span class="o">=</span> <span class="n">get_number_of_users_actives</span><span class="p">;</span>
    <span class="c1">// or</span>
    <span class="kt">int</span> <span class="p">(</span> <span class="o">*</span><span class="n">pointer_function</span> <span class="p">)()</span> <span class="o">=</span> <span class="n">get_number_of_users_inactives</span>

    <span class="k">return</span> <span class="n">pointer_function</span><span class="p">;</span>
<span class="p">}</span></code></pre></div>


<p>As we can see, the function above returns a pointer to one of two function desired.</p>

<p>To show this working, follows an example more detail what we can do:</p>

<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="cp">#include &lt;stdio.h&gt;</span>

<span class="cp">#define ACTIVE 1</span>
<span class="cp">#define INACTIVE 0</span>

<span class="kt">int</span>
<span class="nf">get_number_of_users_actives</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">n_users_actives</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">n_users_actives</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span>
<span class="nf">get_number_of_users_inactives</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">n_users_inactives</span> <span class="o">=</span> <span class="mi">50</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">n_users_inactives</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span>
<span class="p">(</span> <span class="o">*</span><span class="n">get_number_of_users</span><span class="p">(</span> <span class="kt">int</span> <span class="n">is_active</span> <span class="p">)</span> <span class="p">)()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">pointer_function</span><span class="p">)();</span>
    <span class="k">if</span> <span class="p">(</span> <span class="n">is_active</span> <span class="p">)</span>
        <span class="n">pointer_function</span> <span class="o">=</span> <span class="n">get_number_of_users_actives</span><span class="p">;</span>
    <span class="k">else</span>
        <span class="n">pointer_function</span> <span class="o">=</span> <span class="n">get_number_of_users_inactives</span><span class="p">;</span>

    <span class="k">return</span> <span class="n">pointer_function</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span>
<span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="p">(</span> <span class="o">*</span><span class="n">result</span> <span class="p">)()</span> <span class="o">=</span> <span class="n">get_number_of_users</span><span class="p">(</span> <span class="n">ACTIVE</span> <span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span> <span class="s">&quot;Users actives: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">result</span><span class="p">()</span> <span class="p">);</span>

    <span class="n">result</span> <span class="o">=</span> <span class="n">get_number_of_users</span><span class="p">(</span> <span class="n">INACTIVE</span> <span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span> <span class="s">&quot;Users inactives: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">result</span><span class="p">()</span> <span class="p">);</span>
<span class="p">}</span></code></pre></div>


<p>The output is:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">Users actives: 10
Users inactives: 50</code></pre></div>


<p>Again, is advisable to use the <strong>typedef keyword</strong> to facilitate the use this complex syntax and becomes it
more readability. For instance, see how would be with typedef:</p>

<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="k">typedef</span> <span class="nf">int</span> <span class="p">(</span> <span class="o">*</span><span class="n">get_number_of_user</span> <span class="p">)();</span>
<span class="k">typedef</span> <span class="n">get_number_of_user</span> <span class="n">POINT_TO_GET_NUMBER_USER</span><span class="p">;</span></code></pre></div>


<p>So, we can change our function <strong>get_number_of_users</strong> to this:</p>

<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="n">POINT_TO_GET_NUMBER_USER</span> <span class="nf">get_number_of_users</span><span class="p">(</span> <span class="kt">int</span> <span class="n">is_active</span> <span class="p">)</span>
<span class="p">{</span>
    <span class="n">POINT_TO_GET_NUMBER_USER</span> <span class="n">p_get_number</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span> <span class="n">is_active</span> <span class="p">)</span>
        <span class="n">p_get_number</span> <span class="o">=</span> <span class="n">get_number_of_users_actives</span><span class="p">;</span>
    <span class="k">else</span>
        <span class="n">p_get_number</span> <span class="o">=</span> <span class="n">get_number_of_users_inactives</span><span class="p">;</span>

    <span class="k">return</span> <span class="n">p_get_number</span><span class="p">;</span>
<span class="p">}</span></code></pre></div>


<p>and finally, in main function, would be:</p>

<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="kt">int</span>
<span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">POINT_TO_GET_NUMBER_USER</span> <span class="n">result</span> <span class="o">=</span> <span class="n">get_user</span><span class="p">(</span> <span class="n">ACTIVE</span> <span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span> <span class="s">&quot;Users actives: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">result</span><span class="p">()</span> <span class="p">);</span>

    <span class="n">result</span> <span class="o">=</span> <span class="n">get_user</span><span class="p">(</span> <span class="n">INACTIVE</span> <span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span> <span class="s">&quot;Users inactives: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">result</span><span class="p">()</span> <span class="p">);</span>
<span class="p">}</span></code></pre></div>




<p style="border:3px; border-style:solid; border-color:#FF0000; padding: 1em;"><strong>Important!</strong><br><br>

When we use typedef keyword to define a function pointer, we shouldn't use the parentheses as we had done previously
in function pointer definition. Look:
<br>
<br>
<strong>int * ( *point_f )();</strong><br>
Above, was declared a function pointer that return a type integer pointer.
<br>
<br>
<strong>int * ( *point_f() )() { ... }</strong><br>
Above, was implemented a function called point_f that return a function pointer that return a type integer pointer.
<br>
<br>
<strong>typedef int * ( *point_f )();</strong><br>
Above, was declared with typedef keyword a function pointer that return a type integer pointer.
<br>
<br>
Notice that, with typedef keyword, we do not use the parentheses after name, it because we do it when we create a function
with using the typedef definition:<br><br>

<strong>point_f</strong> do_something()<br>
{<br>
....<br>
}<br><br>

If we use parentheses in typedef keyword, we will get errors in compilation time.
</p>


<p>Now look this curious case:</p>

<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="kt">int</span>
<span class="nf">addition</span><span class="p">(</span> <span class="kt">int</span> <span class="n">valueX</span><span class="p">,</span> <span class="kt">int</span> <span class="n">valueY</span> <span class="p">)</span>
<span class="p">{</span>
        <span class="k">return</span> <span class="n">valueX</span> <span class="o">+</span> <span class="n">valueY</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span>
<span class="p">(</span> <span class="o">*</span><span class="n">calculator</span><span class="p">()</span> <span class="p">)()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">p_function</span><span class="p">)(</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span> <span class="p">)</span> <span class="o">=</span> <span class="n">addition</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">p_function</span><span class="p">;</span>
<span class="p">}</span></code></pre></div>


<p>Notice that, the <strong>calculator function</strong>, returns a function pointer that receives two integers types and returns a
type integer. However, the <strong>signature</strong> from function tell us this:</p>

<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="kt">int</span> <span class="p">(</span> <span class="o">*</span><span class="n">calculator</span><span class="p">()</span> <span class="p">)();</span></code></pre></div>


<p>This occurred because the compiler C, infers the parameters type from pointer function and <strong>allow</strong> us omits it, otherwise, we
should do it this way:</p>

<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="kt">int</span> <span class="p">(</span> <span class="o">*</span><span class="n">calculator</span><span class="p">()</span> <span class="p">)(</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span> <span class="p">);</span></code></pre></div>


<p>If by change we specific the parameters types in <strong>calculator</strong> function, we are obliged to put the two parameters and not just one:</p>

<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="kt">int</span> <span class="p">(</span> <span class="o">*</span><span class="n">calculator</span><span class="p">()</span> <span class="p">)(</span> <span class="kt">int</span> <span class="p">);</span> <span class="c1">// Error compile</span></code></pre></div>


<p>The same occurs in declaration:</p>

<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="kt">int</span>
<span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="c1">// We can use this way</span>
    <span class="kt">int</span> <span class="p">(</span> <span class="o">*</span><span class="n">result</span> <span class="p">)()</span> <span class="o">=</span> <span class="n">calculator</span><span class="p">();</span>

    <span class="c1">// Or this way</span>
    <span class="kt">int</span> <span class="p">(</span> <span class="o">*</span><span class="n">result</span> <span class="p">)(</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span> <span class="p">)</span> <span class="o">=</span> <span class="n">calculator</span><span class="p">();</span>

    <span class="c1">// But we cannot this way</span>
    <span class="kt">int</span> <span class="p">(</span> <span class="o">*</span><span class="n">result</span> <span class="p">)(</span> <span class="kt">int</span> <span class="p">)</span> <span class="o">=</span> <span class="n">calculator</span><span class="p">();</span>
<span class="p">}</span></code></pre></div>


<p>Finally, the last example of how we can use function pointer. Here we show a function pointer that
returns a pointer to array of function of the type integer.</p>

<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="kt">int</span> <span class="p">(</span> <span class="o">**</span><span class="n">pointer_function_to_array_of_functions_int</span><span class="p">()</span> <span class="p">)();</span></code></pre></div>


<p>As show above, we have a function that returns a function pointer to pointer, that points to an array
of function that returns an integer type. With this function, we can returns something like this:</p>

<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="kt">int</span> <span class="p">(</span> <span class="o">*</span><span class="n">function_pointer_int</span><span class="p">[]</span> <span class="p">)()</span> <span class="o">=</span> <span class="p">{</span> <span class="n">function_int_one</span><span class="p">,</span> <span class="n">function_int_two</span><span class="p">,</span> <span class="p">...</span> <span class="p">};</span></code></pre></div>


<p>All right, this is more easier with an example. Let rewrites our code used previously that calculate two
numbers with four operations mathematic:</p>

<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="cp">#include &lt;stdio.h&gt;</span>
<span class="cp">#include &lt;stdlib.h&gt;</span>

<span class="k">typedef</span> <span class="kt">int</span> <span class="o">*</span> <span class="p">(</span> <span class="o">*</span><span class="n">FUNCT_PNT</span> <span class="p">)(</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span> <span class="p">);</span>

<span class="kt">int</span>
<span class="nf">multiplication</span><span class="p">(</span> <span class="kt">int</span> <span class="n">valueX</span><span class="p">,</span> <span class="kt">int</span> <span class="n">valueY</span> <span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">valueX</span> <span class="o">*</span> <span class="n">valueY</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span>
<span class="nf">addition</span><span class="p">(</span> <span class="kt">int</span> <span class="n">valueX</span><span class="p">,</span> <span class="kt">int</span> <span class="n">valueY</span> <span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">valueX</span> <span class="o">+</span> <span class="n">valueY</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span>
<span class="nf">subtraction</span><span class="p">(</span> <span class="kt">int</span> <span class="n">valueX</span><span class="p">,</span> <span class="kt">int</span> <span class="n">valueY</span> <span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">valueX</span> <span class="o">-</span> <span class="n">valueY</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span>
<span class="nf">division</span><span class="p">(</span> <span class="kt">int</span> <span class="n">valueX</span><span class="p">,</span> <span class="kt">int</span> <span class="n">valueY</span> <span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">valueX</span> <span class="o">/</span> <span class="n">valueY</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="p">(</span> <span class="o">*</span><span class="n">p_list_fn_operations</span><span class="p">[]</span> <span class="p">)()</span> <span class="o">=</span> <span class="p">{</span> <span class="n">multiplication</span><span class="p">,</span> <span class="n">addition</span><span class="p">,</span> <span class="n">subtraction</span><span class="p">,</span> <span class="n">division</span> <span class="p">};</span>

<span class="kt">int</span>
<span class="p">(</span> <span class="o">**</span><span class="n">calculator</span><span class="p">()</span> <span class="p">)(</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span> <span class="p">)</span>
<span class="p">{</span>
    <span class="cm">/**</span>
<span class="cm">    * There&#39;s no need to use an address-of operator on array, like this:</span>
<span class="cm">    * int ( **p_fn_operations )( int, int ) = &amp;p_list_fn_operations[ 0 ];</span>
<span class="cm">    * since arrays decay into implicit pointers on the right-hand side of</span>
<span class="cm">    * the assignment operator.</span>
<span class="cm">    */</span>
    <span class="kt">int</span> <span class="p">(</span> <span class="o">**</span><span class="n">p_fn_operations</span> <span class="p">)(</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span> <span class="p">)</span> <span class="o">=</span> <span class="n">p_list_fn_operations</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">p_fn_operations</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span>
<span class="n">main</span><span class="p">()</span>
<span class="p">{</span>    
    <span class="c1">// Arrays are implicitly convertible to pointers, so it would be</span>
    <span class="c1">// the syntax below with double pointer:</span>
    <span class="kt">int</span> <span class="p">(</span> <span class="o">**</span> <span class="p">(</span> <span class="o">*</span><span class="n">pointer_function_to_calculator</span> <span class="p">)()</span> <span class="p">)();</span>
    <span class="n">pointer_function_to_calculator</span> <span class="o">=</span> <span class="n">calculator</span><span class="p">;</span>
    <span class="kt">int</span> <span class="p">(</span> <span class="o">**</span><span class="n">list_of_operation</span> <span class="p">)();</span>

    <span class="n">list_of_operation</span> <span class="o">=</span> <span class="p">(</span> <span class="o">*</span><span class="n">pointer_function_to_calculator</span> <span class="p">)();</span>

    <span class="c1">// For each operations, we use an increment arithmetic to go through</span>
    <span class="c1">// of array of pointer, searching by each of that operations.</span>
    <span class="n">printf</span><span class="p">(</span> <span class="s">&quot;Multiplication = %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">(</span> <span class="o">*</span> <span class="n">list_of_operation</span> <span class="p">)(</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">6</span> <span class="p">)</span> <span class="p">);</span>
    <span class="n">list_of_operation</span><span class="o">++</span><span class="p">;</span>

    <span class="n">printf</span><span class="p">(</span> <span class="s">&quot;Addition = %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">(</span> <span class="o">*</span> <span class="n">list_of_operation</span> <span class="p">)(</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">7</span> <span class="p">)</span> <span class="p">);</span>
    <span class="n">list_of_operation</span><span class="o">++</span><span class="p">;</span>

    <span class="n">printf</span><span class="p">(</span> <span class="s">&quot;Subtraction = %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">(</span> <span class="o">*</span> <span class="n">list_of_operation</span> <span class="p">)(</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">4</span> <span class="p">)</span> <span class="p">);</span>
    <span class="n">list_of_operation</span><span class="o">++</span><span class="p">;</span>

    <span class="n">printf</span><span class="p">(</span> <span class="s">&quot;Division = %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">(</span> <span class="o">*</span> <span class="n">list_of_operation</span> <span class="p">)(</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">9</span> <span class="p">)</span> <span class="p">);</span>
<span class="p">}</span></code></pre></div>


<p>The output will be:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">Multiplication</span> <span class="o">=</span> 36
<span class="nv">Addition</span> <span class="o">=</span> 17
<span class="nv">Subtraction</span> <span class="o">=</span> 6
<span class="nv">Division</span> <span class="o">=</span> 9</code></pre></div>




<h3 style="color:navy;">Extra about function pointers</h3>


<p>In C language, the library signal.h have a function called <strong>signal</strong>, that provides a simple interface for
establishing an action for a particular signal.</p>

<p>The said function is the <strong>sighandler_t</strong> function, whose is a function pointer that points to a function
that returns void. That function will go handlers the integer type argument givens, configuring your
respective signal number. So, functions like this, are handles this way:</p>

<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="kt">void</span> <span class="nf">handler</span> <span class="p">(</span><span class="kt">int</span> <span class="n">signum</span><span class="p">)</span> <span class="p">{</span> <span class="err">…</span> <span class="p">}</span></code></pre></div>


<p>And here, the signal function itself:</p>

<p><strong>sighandler_t signal( int signum, sighandler_t action )</strong></p>

<p>The signal function establishes action as the action for the signal signum.</p>

<p>The first argument, <strong>signum</strong>, identifies the signal whose behavior we want to control, and should be a signal number
The second argument, <strong>action</strong>, specifies the action( function ) that will be handlers the signal.</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c">#include &lt;signal.h&gt;</span>
typedef void <span class="o">(</span>*sighandler_t<span class="o">)(</span>int<span class="o">)</span><span class="p">;</span>
sighandler_t signal<span class="o">(</span>int signum, sighandler_t handler<span class="o">)</span><span class="p">;</span></code></pre></div>


<p>For more details, type man signal.</p>

<p>Another famous utility in C language is the <strong>qsort</strong> function, from <strong>stdlib.h</strong> library, that have the following declaration:</p>

<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="kt">void</span> <span class="nf">qsort</span><span class="p">(</span> <span class="kt">void</span> <span class="o">*</span><span class="n">base</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">nmemb</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">size</span><span class="p">,</span>
            <span class="kt">int</span><span class="p">(</span> <span class="o">*</span><span class="n">compar</span> <span class="p">)(</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="p">,</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span> <span class="p">));</span></code></pre></div>


<p>The Linux manual page, describe the following:</p>

<p><em>The qsort() function sorts an array with nmemb elements of size size. The base argument points to the start of the array.</em></p>

<p><em>The contents of the array are sorted in ascending order according to a comparison function pointed to by compar, which is</em>
<em>called with two arguments that point to the objects being compared.</em></p>

<p><em>The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered</em>
<em>to be respectively less than, equal to, or greater than the second. If two members compare as equal, their order in the</em>
<em>sorted array is undefined.</em></p>

<p>So, here we going see an example of how this works:</p>

<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="cp">#include &lt;stdio.h&gt;</span>
<span class="cp">#include &lt;stdlib.h&gt;</span>

<span class="kt">int</span> <span class="nf">desc_sort</span><span class="p">(</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">v1</span><span class="p">,</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">v2</span> <span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">first</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span> <span class="kt">int</span> <span class="o">*</span><span class="p">)</span> <span class="n">v1</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">second</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span> <span class="kt">int</span> <span class="o">*</span> <span class="p">)</span> <span class="n">v2</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span> <span class="n">first</span> <span class="o">&gt;</span> <span class="n">second</span> <span class="p">)</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span> <span class="n">first</span> <span class="o">==</span> <span class="n">second</span> <span class="p">)</span>
        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">else</span>
        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">array</span><span class="p">[</span> <span class="mi">10</span> <span class="p">];</span>

    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span> <span class="p">)</span>
        <span class="n">array</span><span class="p">[</span> <span class="n">i</span> <span class="p">]</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>

    <span class="n">qsort</span><span class="p">(</span> <span class="n">array</span><span class="p">,</span> <span class="mi">10</span> <span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span> <span class="kt">int</span> <span class="p">),</span> <span class="n">desc_sort</span> <span class="p">);</span>

    <span class="k">for</span> <span class="p">(</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span> <span class="p">)</span>
        <span class="n">printf</span> <span class="p">(</span> <span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">array</span><span class="p">[</span> <span class="n">i</span> <span class="p">]</span> <span class="p">);</span>
<span class="p">}</span></code></pre></div>


<p>the output will be:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">9
8
7
6
5
4
3
2
1</code></pre></div>


<p>For more details, type man qsort.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating and Saving Stash List With Git]]></title>
    <link href="http://di0.github.io/blog/2018/09/15/create-and-save-stash-list/"/>
    <updated>2018-09-15T02:33:18-03:00</updated>
    <id>http://di0.github.io/blog/2018/09/15/create-and-save-stash-list</id>
    <content type="html"><![CDATA[<p>When stash the changes in a dirty working directory away, we can can give a more descriptive
message on the command line when we create one. By <!--more-->example:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">git stash save <span class="s2">&quot;Saving anything&quot;</span></code></pre></div>


<p>The above order, will push and holds on stack, the contents with descriptive message.</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">git stash list</code></pre></div>


<p>The command above, will show you, what is the branch name and what position that contents
was saved on stack.</p>

<p>So, to pick up first contents from stack, type:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">git stash pop stash@<span class="o">{</span>0<span class="o">}</span></code></pre></div>


<p>or second</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">git stash pop stash@<span class="o">{</span>1<span class="o">}</span></code></pre></div>


<p>and son on &hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Locking User Account Linux]]></title>
    <link href="http://di0.github.io/blog/2018/05/11/locking-user-account-linux/"/>
    <updated>2018-05-11T12:48:04-03:00</updated>
    <id>http://di0.github.io/blog/2018/05/11/locking-user-account-linux</id>
    <content type="html"><![CDATA[<p>The following command will lock an user <!--more--> account:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">passwd --lock foo</code></pre></div>


<p>or simply</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">passwd -l foo</code></pre></div>


<p>Remember that, you should run the above command as root account.</p>

<p>If you want unlocking the account foo, just type the <strong>passwd</strong> command with <strong>-u</strong> or <strong>&ndash;unlock</strong> parameter, e.g:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">passwd --unlock foo</code></pre></div>


<p>or simply</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">passwd -u foo</code></pre></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Disable IPv6 on Linux]]></title>
    <link href="http://di0.github.io/blog/2018/04/30/disable-ipv6-on-linux/"/>
    <updated>2018-04-30T18:19:07-03:00</updated>
    <id>http://di0.github.io/blog/2018/04/30/disable-ipv6-on-linux</id>
    <content type="html"><![CDATA[<p><strong>IPv6</strong> protocol is not always available in the local area network(lan), to avoid your DHCP connection configure IPv6 in
your network card device, you can disable it through least <!--more--> two ways:</p>

<h3 style="color: #d3d378;font-size 8px">Command line</h3>


<p><strong>sysctl</strong> command is an Linux command that configures kernel parameters at runtime. You can display all
values currently available, typing <strong>sysctl -a</strong>. More details, see <em>sysctl manual page</em>.</p>

<p>Regarding configuration, with super admin user, type:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">sysctl -w net.ipv6.conf.all.disable_ipv6<span class="o">=</span>1
sysctl -w sysctl -w net.ipv6.conf.default.disable_ipv6<span class="o">=</span>1</code></pre></div>


<p>If you want re-enable IPv6, issue the following commands:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">sysctl -w net.ipv6.conf.all.disable_ipv6<span class="o">=</span>0
sysctl -w net.ipv6.conf.default.disable_ipv6<span class="o">=</span>0</code></pre></div>




<h3 style="color: #d3d378;font-size 8px">File configuration(Debian based distro)</h3>


<p>Another way, is through of the file configuration located under directory <strong>/etc/</strong>.
The file name is <strong>sysctl.conf</strong>, which is a simple file containing sysctl values to be read in and set by <strong>sysctl</strong>.</p>

<p>With super admin user, edit the file <span style="color:blue;font-weight:bold">/etc/sysctl.conf</span> and add the following lines:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">net.ipv6.conf.all.disable_ipv6 <span class="o">=</span> 1
net.ipv6.conf.default.disable_ipv6 <span class="o">=</span> 1
net.ipv6.conf.lo.disable_ipv6 <span class="o">=</span> 1</code></pre></div>


<p>To disable, just remove the above lines.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Show Only File Name With Grep Command]]></title>
    <link href="http://di0.github.io/blog/2018/04/30/grep-command-show-only-file-name/"/>
    <updated>2018-04-30T00:48:26-03:00</updated>
    <id>http://di0.github.io/blog/2018/04/30/grep-command-show-only-file-name</id>
    <content type="html"><![CDATA[<p>With <strong>grep</strong> and <strong>cut</strong> delimiter command we can get only file name where the occurrence of the input match. Below an<!--more-->
example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>grep -Rn <span class="s2">&quot;foo&quot;</span> * <span class="p">|</span> cut -f1 -d:
</span></code></pre></td></tr></table></div></figure>


<p><strong>output</strong></p>

<p><img class="rigth" src="http://di0.github.io/images/output_grep_cut.jpeg" width="1800" height="1800" title="'output grep'" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Replace With Stream Editor(AKA Sed)]]></title>
    <link href="http://di0.github.io/blog/2018/04/28/replace-with-stream-editor-aka-sed/"/>
    <updated>2018-04-28T14:08:18-03:00</updated>
    <id>http://di0.github.io/blog/2018/04/28/replace-with-stream-editor-aka-sed</id>
    <content type="html"><![CDATA[<p>The <strong>sed</strong> is command-line utility editor, which filtering and transforming text. Below an example of how it works <!--more--> replacement order:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sed -i <span class="s1">&#39;s/input/replacement/g&#39;</span> some_file
</span></code></pre></td></tr></table></div></figure>


<p><em>where:</em></p>

<p><li> <strong> <em>i</em> </strong> = &ndash;in-place, edit <strong>file.txt</strong> and save it.</li>
<li> <strong> <em>s</em> </strong> = substitute statement.</li>
<li> <strong> <em>input</em> </strong> = original match case.</li>
<li> <strong> <em>replacement</em> </strong> = matched replacement it with.</li>
<li> <strong> <em>g</em> </strong> = global(replace all occurrence, instead of first occurrence).</li>
<li> <strong> <em>some_file</em> </strong> = some target file.</li></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flush Contents of a Memcached Server]]></title>
    <link href="http://di0.github.io/blog/2018/04/25/flush-contents-of-a-memcached/"/>
    <updated>2018-04-25T22:12:26-03:00</updated>
    <id>http://di0.github.io/blog/2018/04/25/flush-contents-of-a-memcached</id>
    <content type="html"><![CDATA[<p>The two ways following examples, show us how flush old data from memcached server through
command line. We use netcat and <!--more--> telnet command to perform this job.</p>

<h4><u>Using netcat Command</u></h4>


<p><strong>netcat</strong> command is a simple unix utility which reads and writes data across network connections, using
TCP or UDP protocol. Below you can see how such commands works:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">echo</span> <span class="s1">&#39;flush_all&#39;</span> <span class="p">|</span> nc localhost 11211
or
<span class="nb">echo</span> <span class="s1">&#39;flush_all&#39;</span> <span class="p">|</span> netcat localhost 11211</code></pre></div>


<p><em>another form way:</em></p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">nc 192.168.1.10 11211<span class="o">&lt;&lt;&lt;</span><span class="s2">&quot;flush_all&quot;</span></code></pre></div>


<p><em>with alias setting:</em></p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">alias </span><span class="nv">flush_mem_cache_server</span><span class="o">=</span><span class="s2">&quot;echo &#39;flush_all&#39; | netcat 127.0.0.1 11211&quot;</span></code></pre></div>


<p>Now, just you run the alias <strong>flush_mem_cache_server</strong> in your bash shell.</p>

<h4><u>Using telnet Command</u></h4>


<p>We can as well use the telnet protocol via default port(11211) from memcached server, typing <strong>flush_all</strong>. For example:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">telnet 192.168.1.10 11211</code></pre></div>


<p>then output will looks like:</p>

<p><img class="rigth" src="http://di0.github.io/images/output_telnet_memcached.jpeg" width="1800" height="1800" title="'output perl group'" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remove Blank Lines With Vi(m)]]></title>
    <link href="http://di0.github.io/blog/2018/04/06/remove-blank-lines-with-vi-m/"/>
    <updated>2018-04-06T16:37:27-03:00</updated>
    <id>http://di0.github.io/blog/2018/04/06/remove-blank-lines-with-vi-m</id>
    <content type="html"><![CDATA[<p>If you want delete blank lines using <em>VI(M)</em> editor, you can use the following match regex <strong>^$</strong> to perform it on the
command mode option(Esc + Shift + :) . e.g: <!--more--></p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">:g/^<span class="nv">$/</span>d</code></pre></div>


<p>The above mentioned entry, will specify the <em>VI(M)</em> editor, delete blank lines.</p>

<ul> g -> will execute command on all lines that match with regex.</ul>


<ul> d -> command order, delete that line.</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Capturing Groups Regex With Perl]]></title>
    <link href="http://di0.github.io/blog/2018/01/31/capturing-groups-regex-with-perl/"/>
    <updated>2018-01-31T20:46:12-02:00</updated>
    <id>http://di0.github.io/blog/2018/01/31/capturing-groups-regex-with-perl</id>
    <content type="html"><![CDATA[<p>Capturing groups in regular expression, against a scalar type, it&rsquo;s possible when you use the variable <!--more--> number, such as $1, $2, $3&hellip;, for example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1">#!/usr/bin/env perl</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;Enter your name and lastname here =&gt; &quot;</span><span class="p">;</span>
</span><span class='line'><span class="nb">chop</span> <span class="p">(</span> <span class="nv">$name_and_lastname</span> <span class="o">=</span> <span class="sr">&lt;STDIN&gt;</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span> <span class="nv">$name_and_lastname</span> <span class="o">=~</span><span class="sr"> /^\s*(\S+)\s+(\S+)\s*$/</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;Hello $1. Your lastname: $2.&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;no result&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;\n&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong> output: </strong></p>

<p><img class="rigth" src="http://di0.github.io/images/output_perl_group.jpeg" width="1800" height="1800" title="'output perl group'" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Searching Exact Word With Vi Editor]]></title>
    <link href="http://di0.github.io/blog/2018/01/31/searching-exact-word-with-vi-editor/"/>
    <updated>2018-01-31T15:41:24-02:00</updated>
    <id>http://di0.github.io/blog/2018/01/31/searching-exact-word-with-vi-editor</id>
    <content type="html"><![CDATA[<p>Below I explain you how search an exact word in VI(M), what you just need to do, is to put there on between <!--more--> regular expression
\&lt; and \>, for example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/<span class="se">\&lt;</span>FOO<span class="se">\&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>It will match only words whose name is <strong>FOO</strong>, rather than, <strong>FOOBAR</strong>, <strong>BARFOO</strong>, etc.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Determining Symbolic Links Java With Update-alternatives Command]]></title>
    <link href="http://di0.github.io/blog/2018/01/17/determining-symbolic-links-java-with-update-alternatives-command/"/>
    <updated>2018-01-17T16:01:01-02:00</updated>
    <id>http://di0.github.io/blog/2018/01/17/determining-symbolic-links-java-with-update-alternatives-command</id>
    <content type="html"><![CDATA[<p>With the utility <strong>update-alternatives</strong>, is possible you set versions of the Java installed in your Operating System Linux(which supports it),
without need add or <!--more--> remove symbolic link manually. To list one or more Java version available in target system, you can just typing the
command <strong>update-alternatives</strong>, adding the argument <strong>--list</strong>, together with name of the symlink(Symbolic Link) desired. For example:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">update-alternatives --list java</code></pre></div>


<p><img class="rigth" src="http://di0.github.io/images/output_update_alternative_list.jpeg" width="1800" height="1800" title="'output perl group'" ></p>

<p>Where <strong>java</strong> is the name of the symbolic link.</p>

<p>Also it is possible, you to install a new version, if by chance it hasn&rsquo;t on the list of the <strong>update-alternatives</strong>. You can thus use the parameter
<strong>--install</strong>, setting the following arguments:</p>

<ol>
    <li> The value properly of the desired symbolic link name. </li>
    <li> The full path of the binary Java. </li>
    <li> Lastly, specifying the level of priority associated with it. </li>
</ol>


<p>For example:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">update-alternatives --install /usr/bin/java java /opt/jdk1.8/bin/java 1</code></pre></div>


<p>After typing the command above, you can use the parameter <strong>--list</strong> to confirming the update:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">update-alternatives --list java</code></pre></div>


<p>To change to a new version, execute <strong>update-alternatives</strong> with parameter <strong>--config</strong>, it will show a menu to you choice your option through
interactive way form:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">update-alternatives --config java</code></pre></div>


<p><img class="rigth" src="http://di0.github.io/images/output_update_alternatives_config.jpeg" width="1800" height="1800" title="'output perl group'" ></p>

<p>There is another non-interactive way to you choice the version, just setting with parameter <strong>--set</strong> or <strong>-s</strong>, instead of <strong>--config</strong>, as below:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">sudo update-alternatives --set java /opt/jdk1.8/bin/java</code></pre></div>


<p>For more info, enter with:</p>

<p><strong> <em>man update-alternatives</em> </strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL - Searching for Distinct Fields]]></title>
    <link href="http://di0.github.io/blog/2018/01/07/searching-for-distinct-fields/"/>
    <updated>2018-01-07T21:42:23-02:00</updated>
    <id>http://di0.github.io/blog/2018/01/07/searching-for-distinct-fields</id>
    <content type="html"><![CDATA[<p>When you haven&rsquo;t idea where one or more columns name are available, you can search them on all table of the database, using <!--more--> the following clause:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="k">DISTINCT</span> <span class="k">TABLE_NAME</span>
</span><span class='line'>    <span class="k">FROM</span> <span class="n">INFORMATION_SCHEMA</span><span class="p">.</span><span class="n">COLUMNS</span>
</span><span class='line'>    <span class="k">WHERE</span> <span class="k">COLUMN_NAME</span> <span class="k">IN</span> <span class="p">(</span><span class="s1">&#39;COLUMN_NAME_DESIRED&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">AND</span> <span class="n">TABLE_SCHEMA</span><span class="o">=</span><span class="s1">&#39;DATABASE_TARGET&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Where <strong>COLUMN_NAME_DESIRED</strong> is the name of the column to be searched and <strong>DATABASE_TARGET</strong> is the database where it must be searched.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MultiThreading - Future in Java]]></title>
    <link href="http://di0.github.io/blog/2017/11/06/multithreading-future-in-java/"/>
    <updated>2017-11-06T02:32:36-02:00</updated>
    <id>http://di0.github.io/blog/2017/11/06/multithreading-future-in-java</id>
    <content type="html"><![CDATA[<p>When we need performing concurrent tasks in Java, we have available since the firsts versions, the Runnable interface. This interface have only method
named <strong>run</strong>. That method must be implemented by <!--more--> participants that wants works with parallel tasks.</p>

<p>Look the signature this method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Runnable</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Como observado acima através de sua a assinatura, não há uma maneira de recuperar o valor de uma operação ou ainda, nem mesmo é possível
lançar uma exceção.</p>

<p>Para casos em que há tarefas que devolvem informações, será necessário o auxílio de um método ou uma propriedade compartilhada para recuperar
armazenar o valor desejado após a execução de uma tarefa.</p>

<p>Conforme exemplo abaixo:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">Foo</span> <span class="kd">implements</span> <span class="n">Runnable</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">operation</span> <span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getOperation</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">operation</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">operation</span> <span class="o">=</span> <span class="n">operation</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Não há problema algum com o uso do exemplo acima, contudo, existe uma solução mais adequada e viável para esse caso, através da
utilização da interface nomeada Callable.</p>

<p>Callable é uma interface que foi disponibilizada na versão J2SE 5.0, ela oferece um método
chamado call(). Através desse método, agora é possível recuperar valores retornados do tipo Object, ou mais
especificamente, qualquer tipo devido à sua construção genericamente parametrizada.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Callable</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>     <span class="n">V</span> <span class="nf">call</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pelo fato de não ser possível trabalhar com Callable com auxílio da classe Thread, a qual implementa apenas
Runnable, é usado ao invés disso, o suporte da interface ExecutorService para executar objetos do tipo Callable.</p>

<p>Através de ExecutorService, é utilizada o método submit, que aceita como parâmetro um Callable e retorna uma
interface Future, responsável por disponibilizar resultados através de operações assíncronas, a assinatura do
método submit é descrito abaixo:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Future</span> <span class="nf">submit</span><span class="o">(</span> <span class="n">Callable</span> <span class="n">task</span> <span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Quando uma tarefa é executada através de Callable, sendo ela “submitada”, pelo método submit(), é retornado a
interface Future e, através dela, é usado o método get, para recuperar os valores processados.</p>

<p>O método get é mutuamente excluído, até que a tarefa termine, semântica idêntica ao Join da classe Thread.</p>

<p>Uma demonstração do uso de Callable é exibido no código seguinte. Esse teste se baseia em um processo se
dividir em duas linhas de execuções, e realizar a incrementação do valor e exibi-lo logo em seguida. Por exemplo:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.util.concurrent.Callable</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.concurrent.ExecutorService</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.concurrent.Executors</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.concurrent.Future</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">Foo</span> <span class="kd">implements</span> <span class="n">Callable</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>        <span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">value</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="n">Integer</span> <span class="nf">call</span><span class="o">()</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>                <span class="k">try</span>
</span><span class='line'>                <span class="o">{</span>
</span><span class='line'>                        <span class="n">value</span><span class="o">++;</span>
</span><span class='line'>                        <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">600</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="k">catch</span> <span class="o">(</span> <span class="n">InterruptedException</span> <span class="n">e</span> <span class="o">)</span>
</span><span class='line'>                <span class="o">{</span>
</span><span class='line'>                        <span class="c1">// stuff</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">return</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span> <span class="n">String</span><span class="o">[]</span> <span class="n">args</span> <span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>                <span class="n">ExecutorService</span> <span class="n">s</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newFixedThreadPool</span><span class="o">(</span> <span class="mi">1</span> <span class="o">);</span>
</span><span class='line'>                <span class="n">Callable</span> <span class="n">c1</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Foo</span><span class="o">();</span>
</span><span class='line'>                <span class="n">Callable</span> <span class="n">c2</span> <span class="o">=</span> <span class="n">c1</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">for</span> <span class="o">(</span> <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">count</span> <span class="o">&lt;=</span> <span class="mi">5</span><span class="o">;</span> <span class="n">count</span><span class="o">++</span> <span class="o">)</span>
</span><span class='line'>                <span class="o">{</span>
</span><span class='line'>                        <span class="n">Future</span> <span class="n">f1</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">submit</span><span class="o">(</span> <span class="n">c1</span> <span class="o">);</span>
</span><span class='line'>                        <span class="n">Future</span> <span class="n">f2</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">submit</span><span class="o">(</span> <span class="n">c2</span> <span class="o">);</span>
</span><span class='line'>
</span><span class='line'>                        <span class="n">Integer</span> <span class="n">i1</span> <span class="o">=</span> <span class="n">f1</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>                        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span> <span class="n">i1</span> <span class="o">+</span> <span class="s">&quot; -&gt; Executed by c1 reference&quot;</span> <span class="o">);</span>
</span><span class='line'>
</span><span class='line'>                        <span class="n">Integer</span> <span class="n">i2</span> <span class="o">=</span> <span class="n">f2</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>                        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span> <span class="n">i2</span> <span class="o">+</span> <span class="s">&quot; -&gt; Executed by c2 reference&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">s</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>No trecho de código acima, na linhas 25 é utilizado o método estático newFixedThreadPool(), da classe Executors. Esse método
cria uma espécie de mina de Threads, e diz a quantidade de tarefas que serão executadas a um
determinado momento. O argumento 1, diz que apenas uma Thread executará por vez.</p>

<p>Na linha 26, a variável c1 referencia um objeto que tem Callable a serem executados e na linha seguinte, uma outra
variável(c2) referencia a mesma instância, para que seja possível demonstrar duas linhas de execuções, atuando na mesma tarefa.</p>

<p>No loop, as duas threads serão “submitadas” e executadas e seus valores recuperadas pelo método get() da
interface Future e, no fim do loop, o serviço executor é finalizado com método shutdown(), o resultado da operação será:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="m">1</span> -&gt; Executed by c1 reference
</span><span class='line'><span class="m">2</span> -&gt; Executed by c2 reference
</span><span class='line'><span class="m">3</span> -&gt; Executed by c1 reference
</span><span class='line'><span class="m">4</span> -&gt; Executed by c2 reference
</span><span class='line'><span class="m">5</span> -&gt; Executed by c1 reference
</span><span class='line'><span class="m">6</span> -&gt; Executed by c2 reference
</span><span class='line'><span class="m">7</span> -&gt; Executed by c1 reference
</span><span class='line'><span class="m">8</span> -&gt; Executed by c2 reference
</span><span class='line'><span class="m">9</span> -&gt; Executed by c1 reference
</span><span class='line'><span class="m">10</span> -&gt; Executed by c2 reference
</span></code></pre></td></tr></table></div></figure>


<p>De acordo o que foi passado para o método Executors.newFixedThreadPool( 1 ), apenas uma linha foi
executada por tarefa. Caso o parâmetro seja alterado para 2, a saída será algo como:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="m">2</span> -&gt; Executed by c1 reference
</span><span class='line'><span class="m">2</span> -&gt; Executed by c2 reference
</span><span class='line'><span class="m">4</span> -&gt; Executed by c1 reference
</span><span class='line'><span class="m">4</span> -&gt; Executed by c2 reference
</span><span class='line'><span class="m">6</span> -&gt; Executed by c1 reference
</span><span class='line'><span class="m">6</span> -&gt; Executed by c2 reference
</span><span class='line'><span class="m">8</span> -&gt; Executed by c1 reference
</span><span class='line'><span class="m">8</span> -&gt; Executed by c2 reference
</span><span class='line'><span class="m">10</span> -&gt; Executed by c1 reference
</span><span class='line'><span class="m">10</span> -&gt; Executed by c2 reference
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
